
knight-lights-v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003430  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080034f0  080034f0  000134f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800350c  0800350c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800350c  0800350c  0001350c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003514  08003514  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003514  08003514  00013514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003518  08003518  00013518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800351c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000070  0800358c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  0800358c  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af87  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c6  00000000  00000000  0002b01f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  0002d1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b0  00000000  00000000  0002daa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001562a  00000000  00000000  0002e250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b2b1  00000000  00000000  0004387a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00076015  00000000  00000000  0004eb2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c4b40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002118  00000000  00000000  000c4b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080034d8 	.word	0x080034d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080034d8 	.word	0x080034d8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <_Z9setColumni>:
 *  Created on: Nov 14, 2021
 *      Author: Red
 */
#include "chessgpio.h"

int setColumn(int column) {
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]

	if (column & 1) {
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	2201      	movs	r2, #1
 80004a8:	4013      	ands	r3, r2
 80004aa:	d007      	beq.n	80004bc <_Z9setColumni+0x20>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80004ac:	23a0      	movs	r3, #160	; 0xa0
 80004ae:	05db      	lsls	r3, r3, #23
 80004b0:	2201      	movs	r2, #1
 80004b2:	2120      	movs	r1, #32
 80004b4:	0018      	movs	r0, r3
 80004b6:	f001 fe82 	bl	80021be <HAL_GPIO_WritePin>
 80004ba:	e006      	b.n	80004ca <_Z9setColumni+0x2e>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80004bc:	23a0      	movs	r3, #160	; 0xa0
 80004be:	05db      	lsls	r3, r3, #23
 80004c0:	2200      	movs	r2, #0
 80004c2:	2120      	movs	r1, #32
 80004c4:	0018      	movs	r0, r3
 80004c6:	f001 fe7a 	bl	80021be <HAL_GPIO_WritePin>
	}

	if (column & 2) {
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	2202      	movs	r2, #2
 80004ce:	4013      	ands	r3, r2
 80004d0:	d007      	beq.n	80004e2 <_Z9setColumni+0x46>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80004d2:	23a0      	movs	r3, #160	; 0xa0
 80004d4:	05db      	lsls	r3, r3, #23
 80004d6:	2201      	movs	r2, #1
 80004d8:	2140      	movs	r1, #64	; 0x40
 80004da:	0018      	movs	r0, r3
 80004dc:	f001 fe6f 	bl	80021be <HAL_GPIO_WritePin>
 80004e0:	e006      	b.n	80004f0 <_Z9setColumni+0x54>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80004e2:	23a0      	movs	r3, #160	; 0xa0
 80004e4:	05db      	lsls	r3, r3, #23
 80004e6:	2200      	movs	r2, #0
 80004e8:	2140      	movs	r1, #64	; 0x40
 80004ea:	0018      	movs	r0, r3
 80004ec:	f001 fe67 	bl	80021be <HAL_GPIO_WritePin>
	}

	if (column & 4) {
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2204      	movs	r2, #4
 80004f4:	4013      	ands	r3, r2
 80004f6:	d007      	beq.n	8000508 <_Z9setColumni+0x6c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80004f8:	23a0      	movs	r3, #160	; 0xa0
 80004fa:	05db      	lsls	r3, r3, #23
 80004fc:	2201      	movs	r2, #1
 80004fe:	2180      	movs	r1, #128	; 0x80
 8000500:	0018      	movs	r0, r3
 8000502:	f001 fe5c 	bl	80021be <HAL_GPIO_WritePin>
 8000506:	e006      	b.n	8000516 <_Z9setColumni+0x7a>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000508:	23a0      	movs	r3, #160	; 0xa0
 800050a:	05db      	lsls	r3, r3, #23
 800050c:	2200      	movs	r2, #0
 800050e:	2180      	movs	r1, #128	; 0x80
 8000510:	0018      	movs	r0, r3
 8000512:	f001 fe54 	bl	80021be <HAL_GPIO_WritePin>
	}

	HAL_Delay(10);
 8000516:	200a      	movs	r0, #10
 8000518:	f000 ffe0 	bl	80014dc <HAL_Delay>
	return 1;
 800051c:	2301      	movs	r3, #1

}
 800051e:	0018      	movs	r0, r3
 8000520:	46bd      	mov	sp, r7
 8000522:	b002      	add	sp, #8
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <_Z10readColumnv>:

int readColumn() {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0

	int returnValue = 0;
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]

	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)) {
 8000532:	2380      	movs	r3, #128	; 0x80
 8000534:	011a      	lsls	r2, r3, #4
 8000536:	23a0      	movs	r3, #160	; 0xa0
 8000538:	05db      	lsls	r3, r3, #23
 800053a:	0011      	movs	r1, r2
 800053c:	0018      	movs	r0, r3
 800053e:	f001 fe21 	bl	8002184 <HAL_GPIO_ReadPin>
 8000542:	0003      	movs	r3, r0
 8000544:	1e5a      	subs	r2, r3, #1
 8000546:	4193      	sbcs	r3, r2
 8000548:	b2db      	uxtb	r3, r3
 800054a:	2b00      	cmp	r3, #0
 800054c:	d003      	beq.n	8000556 <_Z10readColumnv+0x2e>
		returnValue |= 1;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2201      	movs	r2, #1
 8000552:	4313      	orrs	r3, r2
 8000554:	607b      	str	r3, [r7, #4]
	}

	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)) {
 8000556:	2380      	movs	r3, #128	; 0x80
 8000558:	00da      	lsls	r2, r3, #3
 800055a:	23a0      	movs	r3, #160	; 0xa0
 800055c:	05db      	lsls	r3, r3, #23
 800055e:	0011      	movs	r1, r2
 8000560:	0018      	movs	r0, r3
 8000562:	f001 fe0f 	bl	8002184 <HAL_GPIO_ReadPin>
 8000566:	0003      	movs	r3, r0
 8000568:	1e5a      	subs	r2, r3, #1
 800056a:	4193      	sbcs	r3, r2
 800056c:	b2db      	uxtb	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d003      	beq.n	800057a <_Z10readColumnv+0x52>
			returnValue |= 2;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2202      	movs	r2, #2
 8000576:	4313      	orrs	r3, r2
 8000578:	607b      	str	r3, [r7, #4]
		}

	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)) {
 800057a:	2380      	movs	r3, #128	; 0x80
 800057c:	009a      	lsls	r2, r3, #2
 800057e:	23a0      	movs	r3, #160	; 0xa0
 8000580:	05db      	lsls	r3, r3, #23
 8000582:	0011      	movs	r1, r2
 8000584:	0018      	movs	r0, r3
 8000586:	f001 fdfd 	bl	8002184 <HAL_GPIO_ReadPin>
 800058a:	0003      	movs	r3, r0
 800058c:	1e5a      	subs	r2, r3, #1
 800058e:	4193      	sbcs	r3, r2
 8000590:	b2db      	uxtb	r3, r3
 8000592:	2b00      	cmp	r3, #0
 8000594:	d003      	beq.n	800059e <_Z10readColumnv+0x76>
			returnValue |= 4;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2204      	movs	r2, #4
 800059a:	4313      	orrs	r3, r2
 800059c:	607b      	str	r3, [r7, #4]
		}

	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 800059e:	2380      	movs	r3, #128	; 0x80
 80005a0:	005a      	lsls	r2, r3, #1
 80005a2:	23a0      	movs	r3, #160	; 0xa0
 80005a4:	05db      	lsls	r3, r3, #23
 80005a6:	0011      	movs	r1, r2
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 fdeb 	bl	8002184 <HAL_GPIO_ReadPin>
 80005ae:	0003      	movs	r3, r0
 80005b0:	1e5a      	subs	r2, r3, #1
 80005b2:	4193      	sbcs	r3, r2
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d003      	beq.n	80005c2 <_Z10readColumnv+0x9a>
			returnValue |= 8;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2208      	movs	r2, #8
 80005be:	4313      	orrs	r3, r2
 80005c0:	607b      	str	r3, [r7, #4]
		}

	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) {
 80005c2:	2380      	movs	r3, #128	; 0x80
 80005c4:	021b      	lsls	r3, r3, #8
 80005c6:	4a23      	ldr	r2, [pc, #140]	; (8000654 <_Z10readColumnv+0x12c>)
 80005c8:	0019      	movs	r1, r3
 80005ca:	0010      	movs	r0, r2
 80005cc:	f001 fdda 	bl	8002184 <HAL_GPIO_ReadPin>
 80005d0:	0003      	movs	r3, r0
 80005d2:	1e5a      	subs	r2, r3, #1
 80005d4:	4193      	sbcs	r3, r2
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d003      	beq.n	80005e4 <_Z10readColumnv+0xbc>
			returnValue |= 16;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2210      	movs	r2, #16
 80005e0:	4313      	orrs	r3, r2
 80005e2:	607b      	str	r3, [r7, #4]
		}

	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)) {
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	01db      	lsls	r3, r3, #7
 80005e8:	4a1a      	ldr	r2, [pc, #104]	; (8000654 <_Z10readColumnv+0x12c>)
 80005ea:	0019      	movs	r1, r3
 80005ec:	0010      	movs	r0, r2
 80005ee:	f001 fdc9 	bl	8002184 <HAL_GPIO_ReadPin>
 80005f2:	0003      	movs	r3, r0
 80005f4:	1e5a      	subs	r2, r3, #1
 80005f6:	4193      	sbcs	r3, r2
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d003      	beq.n	8000606 <_Z10readColumnv+0xde>
			returnValue |= 32;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2220      	movs	r2, #32
 8000602:	4313      	orrs	r3, r2
 8000604:	607b      	str	r3, [r7, #4]
		}

	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)) {
 8000606:	2380      	movs	r3, #128	; 0x80
 8000608:	019b      	lsls	r3, r3, #6
 800060a:	4a12      	ldr	r2, [pc, #72]	; (8000654 <_Z10readColumnv+0x12c>)
 800060c:	0019      	movs	r1, r3
 800060e:	0010      	movs	r0, r2
 8000610:	f001 fdb8 	bl	8002184 <HAL_GPIO_ReadPin>
 8000614:	0003      	movs	r3, r0
 8000616:	1e5a      	subs	r2, r3, #1
 8000618:	4193      	sbcs	r3, r2
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2b00      	cmp	r3, #0
 800061e:	d003      	beq.n	8000628 <_Z10readColumnv+0x100>
			returnValue |= 64;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2240      	movs	r2, #64	; 0x40
 8000624:	4313      	orrs	r3, r2
 8000626:	607b      	str	r3, [r7, #4]
		}

	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)) {
 8000628:	2380      	movs	r3, #128	; 0x80
 800062a:	015b      	lsls	r3, r3, #5
 800062c:	4a09      	ldr	r2, [pc, #36]	; (8000654 <_Z10readColumnv+0x12c>)
 800062e:	0019      	movs	r1, r3
 8000630:	0010      	movs	r0, r2
 8000632:	f001 fda7 	bl	8002184 <HAL_GPIO_ReadPin>
 8000636:	0003      	movs	r3, r0
 8000638:	1e5a      	subs	r2, r3, #1
 800063a:	4193      	sbcs	r3, r2
 800063c:	b2db      	uxtb	r3, r3
 800063e:	2b00      	cmp	r3, #0
 8000640:	d003      	beq.n	800064a <_Z10readColumnv+0x122>
			returnValue |= 128;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2280      	movs	r2, #128	; 0x80
 8000646:	4313      	orrs	r3, r2
 8000648:	607b      	str	r3, [r7, #4]
		}
	return returnValue;
 800064a:	687b      	ldr	r3, [r7, #4]

}
 800064c:	0018      	movs	r0, r3
 800064e:	46bd      	mov	sp, r7
 8000650:	b002      	add	sp, #8
 8000652:	bd80      	pop	{r7, pc}
 8000654:	50000400 	.word	0x50000400

08000658 <HAL_SPI_TxHalfCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	return;
 8000660:	46c0      	nop			; (mov r8, r8)
}
 8000662:	46bd      	mov	sp, r7
 8000664:	b002      	add	sp, #8
 8000666:	bd80      	pop	{r7, pc}

08000668 <_Z12readSwitchesP11switchArray>:

void readSwitches(switchArray* array) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	int active = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]
	for (int column = 0; column < 8; ++column) {
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	2b07      	cmp	r3, #7
 800067c:	dc28      	bgt.n	80006d0 <_Z12readSwitchesP11switchArray+0x68>

		setColumn(column);
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	0018      	movs	r0, r3
 8000682:	f7ff ff0b 	bl	800049c <_Z9setColumni>
		active = readColumn();
 8000686:	f7ff ff4f 	bl	8000528 <_Z10readColumnv>
 800068a:	0003      	movs	r3, r0
 800068c:	60fb      	str	r3, [r7, #12]
		for (int row = 0; row < 8; ++row) {
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	693b      	ldr	r3, [r7, #16]
 8000694:	2b07      	cmp	r3, #7
 8000696:	dc17      	bgt.n	80006c8 <_Z12readSwitchesP11switchArray+0x60>
			if(active & (1 << row)) {
 8000698:	68fa      	ldr	r2, [r7, #12]
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	411a      	asrs	r2, r3
 800069e:	0013      	movs	r3, r2
 80006a0:	2201      	movs	r2, #1
 80006a2:	4013      	ands	r3, r2
 80006a4:	d006      	beq.n	80006b4 <_Z12readSwitchesP11switchArray+0x4c>
				array->set(column, row);
 80006a6:	693a      	ldr	r2, [r7, #16]
 80006a8:	6979      	ldr	r1, [r7, #20]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	0018      	movs	r0, r3
 80006ae:	f000 fd9f 	bl	80011f0 <_ZN11switchArray3setEii>
 80006b2:	e005      	b.n	80006c0 <_Z12readSwitchesP11switchArray+0x58>
			} else {
				array->reset(column, row);
 80006b4:	693a      	ldr	r2, [r7, #16]
 80006b6:	6979      	ldr	r1, [r7, #20]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 fdb5 	bl	800122a <_ZN11switchArray5resetEii>
		for (int row = 0; row < 8; ++row) {
 80006c0:	693b      	ldr	r3, [r7, #16]
 80006c2:	3301      	adds	r3, #1
 80006c4:	613b      	str	r3, [r7, #16]
 80006c6:	e7e4      	b.n	8000692 <_Z12readSwitchesP11switchArray+0x2a>
	for (int column = 0; column < 8; ++column) {
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	3301      	adds	r3, #1
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	e7d3      	b.n	8000678 <_Z12readSwitchesP11switchArray+0x10>
			}
		}

	}

}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b006      	add	sp, #24
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006de:	f000 fe8d 	bl	80013fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e2:	f000 f849 	bl	8000778 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e6:	f000 f973 	bl	80009d0 <_ZL12MX_GPIO_Initv>
  MX_ADC_Init();
 80006ea:	f000 f8a9 	bl	8000840 <_ZL11MX_ADC_Initv>
  MX_DMA_Init();
 80006ee:	f000 f951 	bl	8000994 <_ZL11MX_DMA_Initv>
  MX_SPI1_Init();
 80006f2:	f000 f913 	bl	800091c <_ZL12MX_SPI1_Initv>


  // Initialize a color to the array and write it (continually)
  pixelArray* pixArray = new pixelArray;
 80006f6:	4b1d      	ldr	r3, [pc, #116]	; (800076c <main+0x94>)
 80006f8:	0018      	movs	r0, r3
 80006fa:	f002 fdc5 	bl	8003288 <_Znwj>
 80006fe:	0003      	movs	r3, r0
 8000700:	607b      	str	r3, [r7, #4]
  pixArray->initialize(lights);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2140      	movs	r1, #64	; 0x40
 8000706:	0018      	movs	r0, r3
 8000708:	f000 fbfe 	bl	8000f08 <_ZN10pixelArray10initializeEi>
  pixArray->setStrip(0x010000);
 800070c:	2380      	movs	r3, #128	; 0x80
 800070e:	025a      	lsls	r2, r3, #9
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	0011      	movs	r1, r2
 8000714:	0018      	movs	r0, r3
 8000716:	f000 fb64 	bl	8000de2 <_ZN10pixelArray8setStripEm>

  // Initialize the switch array to hold information on the board's state
  // Binary on or off for whether a hall sensor is driving or off
  switchArray* swArray = new switchArray;
 800071a:	2008      	movs	r0, #8
 800071c:	f002 fdb4 	bl	8003288 <_Znwj>
 8000720:	0003      	movs	r3, r0
 8000722:	603b      	str	r3, [r7, #0]
  swArray->initialize();
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	0018      	movs	r0, r3
 8000728:	f000 fdb9 	bl	800129e <_ZN11switchArray10initializeEv>


	HAL_SPI_Transmit_DMA(&hspi1, pixArray->buffer, pixArray->buffer_length);
 800072c:	6879      	ldr	r1, [r7, #4]
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	23fe      	movs	r3, #254	; 0xfe
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	58d3      	ldr	r3, [r2, r3]
 8000736:	b29a      	uxth	r2, r3
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <main+0x98>)
 800073a:	0018      	movs	r0, r3
 800073c:	f002 fb76 	bl	8002e2c <HAL_SPI_Transmit_DMA>

	while (1)
	{


		readSwitches(swArray);
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	0018      	movs	r0, r3
 8000744:	f7ff ff90 	bl	8000668 <_Z12readSwitchesP11switchArray>
		pixArray->passThrough(swArray);
 8000748:	683a      	ldr	r2, [r7, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	0011      	movs	r1, r2
 800074e:	0018      	movs	r0, r3
 8000750:	f000 fc0a 	bl	8000f68 <_ZN10pixelArray11passThroughEP11switchArray>
		//pixArray->setStrip(0x000100);
		//HAL_SPI_Transmit_DMA(&hspi1, pixArray->buffer, pixArray->buffer_length);
		//HAL_Delay(100);
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8000754:	2380      	movs	r3, #128	; 0x80
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4a06      	ldr	r2, [pc, #24]	; (8000774 <main+0x9c>)
 800075a:	0019      	movs	r1, r3
 800075c:	0010      	movs	r0, r2
 800075e:	f001 fd4b 	bl	80021f8 <HAL_GPIO_TogglePin>
		//pixArray->setStrip(0x000001);
		//HAL_SPI_Transmit_DMA(&hspi1, pixArray->buffer, pixArray->buffer_length);
		HAL_Delay(10);
 8000762:	200a      	movs	r0, #10
 8000764:	f000 feba 	bl	80014dc <HAL_Delay>
		readSwitches(swArray);
 8000768:	e7ea      	b.n	8000740 <main+0x68>
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	00000404 	.word	0x00000404
 8000770:	200000e8 	.word	0x200000e8
 8000774:	50000400 	.word	0x50000400

08000778 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b093      	sub	sp, #76	; 0x4c
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	2414      	movs	r4, #20
 8000780:	193b      	adds	r3, r7, r4
 8000782:	0018      	movs	r0, r3
 8000784:	2334      	movs	r3, #52	; 0x34
 8000786:	001a      	movs	r2, r3
 8000788:	2100      	movs	r1, #0
 800078a:	f002 fdd1 	bl	8003330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078e:	003b      	movs	r3, r7
 8000790:	0018      	movs	r0, r3
 8000792:	2314      	movs	r3, #20
 8000794:	001a      	movs	r2, r3
 8000796:	2100      	movs	r1, #0
 8000798:	f002 fdca 	bl	8003330 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800079c:	4b26      	ldr	r3, [pc, #152]	; (8000838 <_Z18SystemClock_Configv+0xc0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a26      	ldr	r2, [pc, #152]	; (800083c <_Z18SystemClock_Configv+0xc4>)
 80007a2:	401a      	ands	r2, r3
 80007a4:	4b24      	ldr	r3, [pc, #144]	; (8000838 <_Z18SystemClock_Configv+0xc0>)
 80007a6:	2180      	movs	r1, #128	; 0x80
 80007a8:	0109      	lsls	r1, r1, #4
 80007aa:	430a      	orrs	r2, r1
 80007ac:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ae:	0021      	movs	r1, r4
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2202      	movs	r2, #2
 80007b4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2201      	movs	r2, #1
 80007ba:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2210      	movs	r2, #16
 80007c0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2202      	movs	r2, #2
 80007c6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2200      	movs	r2, #0
 80007cc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2280      	movs	r2, #128	; 0x80
 80007d2:	02d2      	lsls	r2, r2, #11
 80007d4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2280      	movs	r2, #128	; 0x80
 80007da:	03d2      	lsls	r2, r2, #15
 80007dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	0018      	movs	r0, r3
 80007e2:	f001 fd25 	bl	8002230 <HAL_RCC_OscConfig>
 80007e6:	0003      	movs	r3, r0
 80007e8:	1e5a      	subs	r2, r3, #1
 80007ea:	4193      	sbcs	r3, r2
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <_Z18SystemClock_Configv+0x7e>
  {
    Error_Handler();
 80007f2:	f000 f987 	bl	8000b04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f6:	003b      	movs	r3, r7
 80007f8:	220f      	movs	r2, #15
 80007fa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fc:	003b      	movs	r3, r7
 80007fe:	2203      	movs	r2, #3
 8000800:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000802:	003b      	movs	r3, r7
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000808:	003b      	movs	r3, r7
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080e:	003b      	movs	r3, r7
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000814:	003b      	movs	r3, r7
 8000816:	2101      	movs	r1, #1
 8000818:	0018      	movs	r0, r3
 800081a:	f002 f885 	bl	8002928 <HAL_RCC_ClockConfig>
 800081e:	0003      	movs	r3, r0
 8000820:	1e5a      	subs	r2, r3, #1
 8000822:	4193      	sbcs	r3, r2
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 800082a:	f000 f96b 	bl	8000b04 <Error_Handler>
  }
}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	b013      	add	sp, #76	; 0x4c
 8000834:	bd90      	pop	{r4, r7, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	40007000 	.word	0x40007000
 800083c:	ffffe7ff 	.word	0xffffe7ff

08000840 <_ZL11MX_ADC_Initv>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000846:	003b      	movs	r3, r7
 8000848:	0018      	movs	r0, r3
 800084a:	2308      	movs	r3, #8
 800084c:	001a      	movs	r2, r3
 800084e:	2100      	movs	r1, #0
 8000850:	f002 fd6e 	bl	8003330 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000854:	4b2e      	ldr	r3, [pc, #184]	; (8000910 <_ZL11MX_ADC_Initv+0xd0>)
 8000856:	4a2f      	ldr	r2, [pc, #188]	; (8000914 <_ZL11MX_ADC_Initv+0xd4>)
 8000858:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800085a:	4b2d      	ldr	r3, [pc, #180]	; (8000910 <_ZL11MX_ADC_Initv+0xd0>)
 800085c:	2200      	movs	r2, #0
 800085e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000860:	4b2b      	ldr	r3, [pc, #172]	; (8000910 <_ZL11MX_ADC_Initv+0xd0>)
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	05d2      	lsls	r2, r2, #23
 8000866:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000868:	4b29      	ldr	r3, [pc, #164]	; (8000910 <_ZL11MX_ADC_Initv+0xd0>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800086e:	4b28      	ldr	r3, [pc, #160]	; (8000910 <_ZL11MX_ADC_Initv+0xd0>)
 8000870:	2200      	movs	r2, #0
 8000872:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000874:	4b26      	ldr	r3, [pc, #152]	; (8000910 <_ZL11MX_ADC_Initv+0xd0>)
 8000876:	2201      	movs	r2, #1
 8000878:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800087a:	4b25      	ldr	r3, [pc, #148]	; (8000910 <_ZL11MX_ADC_Initv+0xd0>)
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000880:	4b23      	ldr	r3, [pc, #140]	; (8000910 <_ZL11MX_ADC_Initv+0xd0>)
 8000882:	2220      	movs	r2, #32
 8000884:	2100      	movs	r1, #0
 8000886:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000888:	4b21      	ldr	r3, [pc, #132]	; (8000910 <_ZL11MX_ADC_Initv+0xd0>)
 800088a:	2221      	movs	r2, #33	; 0x21
 800088c:	2100      	movs	r1, #0
 800088e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000890:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <_ZL11MX_ADC_Initv+0xd0>)
 8000892:	2200      	movs	r2, #0
 8000894:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000896:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <_ZL11MX_ADC_Initv+0xd0>)
 8000898:	22c2      	movs	r2, #194	; 0xc2
 800089a:	32ff      	adds	r2, #255	; 0xff
 800089c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800089e:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <_ZL11MX_ADC_Initv+0xd0>)
 80008a0:	222c      	movs	r2, #44	; 0x2c
 80008a2:	2100      	movs	r1, #0
 80008a4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a6:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <_ZL11MX_ADC_Initv+0xd0>)
 80008a8:	2204      	movs	r2, #4
 80008aa:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008ac:	4b18      	ldr	r3, [pc, #96]	; (8000910 <_ZL11MX_ADC_Initv+0xd0>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80008b2:	4b17      	ldr	r3, [pc, #92]	; (8000910 <_ZL11MX_ADC_Initv+0xd0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <_ZL11MX_ADC_Initv+0xd0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <_ZL11MX_ADC_Initv+0xd0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <_ZL11MX_ADC_Initv+0xd0>)
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 fe2c 	bl	8001524 <HAL_ADC_Init>
 80008cc:	0003      	movs	r3, r0
 80008ce:	1e5a      	subs	r2, r3, #1
 80008d0:	4193      	sbcs	r3, r2
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <_ZL11MX_ADC_Initv+0x9c>
  {
    Error_Handler();
 80008d8:	f000 f914 	bl	8000b04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008dc:	003b      	movs	r3, r7
 80008de:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <_ZL11MX_ADC_Initv+0xd8>)
 80008e0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80008e2:	003b      	movs	r3, r7
 80008e4:	2280      	movs	r2, #128	; 0x80
 80008e6:	0152      	lsls	r2, r2, #5
 80008e8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008ea:	003a      	movs	r2, r7
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <_ZL11MX_ADC_Initv+0xd0>)
 80008ee:	0011      	movs	r1, r2
 80008f0:	0018      	movs	r0, r3
 80008f2:	f000 ff8b 	bl	800180c <HAL_ADC_ConfigChannel>
 80008f6:	0003      	movs	r3, r0
 80008f8:	1e5a      	subs	r2, r3, #1
 80008fa:	4193      	sbcs	r3, r2
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <_ZL11MX_ADC_Initv+0xc6>
  {
    Error_Handler();
 8000902:	f000 f8ff 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	b002      	add	sp, #8
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	2000008c 	.word	0x2000008c
 8000914:	40012400 	.word	0x40012400
 8000918:	08000004 	.word	0x08000004

0800091c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000920:	4b1a      	ldr	r3, [pc, #104]	; (800098c <_ZL12MX_SPI1_Initv+0x70>)
 8000922:	4a1b      	ldr	r2, [pc, #108]	; (8000990 <_ZL12MX_SPI1_Initv+0x74>)
 8000924:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000926:	4b19      	ldr	r3, [pc, #100]	; (800098c <_ZL12MX_SPI1_Initv+0x70>)
 8000928:	2282      	movs	r2, #130	; 0x82
 800092a:	0052      	lsls	r2, r2, #1
 800092c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <_ZL12MX_SPI1_Initv+0x70>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000934:	4b15      	ldr	r3, [pc, #84]	; (800098c <_ZL12MX_SPI1_Initv+0x70>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <_ZL12MX_SPI1_Initv+0x70>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <_ZL12MX_SPI1_Initv+0x70>)
 8000942:	2200      	movs	r2, #0
 8000944:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <_ZL12MX_SPI1_Initv+0x70>)
 8000948:	2280      	movs	r2, #128	; 0x80
 800094a:	0092      	lsls	r2, r2, #2
 800094c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <_ZL12MX_SPI1_Initv+0x70>)
 8000950:	2210      	movs	r2, #16
 8000952:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000954:	4b0d      	ldr	r3, [pc, #52]	; (800098c <_ZL12MX_SPI1_Initv+0x70>)
 8000956:	2200      	movs	r2, #0
 8000958:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <_ZL12MX_SPI1_Initv+0x70>)
 800095c:	2200      	movs	r2, #0
 800095e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000960:	4b0a      	ldr	r3, [pc, #40]	; (800098c <_ZL12MX_SPI1_Initv+0x70>)
 8000962:	2200      	movs	r2, #0
 8000964:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <_ZL12MX_SPI1_Initv+0x70>)
 8000968:	2207      	movs	r2, #7
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800096c:	4b07      	ldr	r3, [pc, #28]	; (800098c <_ZL12MX_SPI1_Initv+0x70>)
 800096e:	0018      	movs	r0, r3
 8000970:	f002 f9c8 	bl	8002d04 <HAL_SPI_Init>
 8000974:	0003      	movs	r3, r0
 8000976:	1e5a      	subs	r2, r3, #1
 8000978:	4193      	sbcs	r3, r2
 800097a:	b2db      	uxtb	r3, r3
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <_ZL12MX_SPI1_Initv+0x68>
  {
    Error_Handler();
 8000980:	f000 f8c0 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	200000e8 	.word	0x200000e8
 8000990:	40013000 	.word	0x40013000

08000994 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <_ZL11MX_DMA_Initv+0x38>)
 800099c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <_ZL11MX_DMA_Initv+0x38>)
 80009a0:	2101      	movs	r1, #1
 80009a2:	430a      	orrs	r2, r1
 80009a4:	631a      	str	r2, [r3, #48]	; 0x30
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <_ZL11MX_DMA_Initv+0x38>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	2201      	movs	r2, #1
 80009ac:	4013      	ands	r3, r2
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	200a      	movs	r0, #10
 80009b8:	f001 f87a 	bl	8001ab0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80009bc:	200a      	movs	r0, #10
 80009be:	f001 f88c 	bl	8001ada <HAL_NVIC_EnableIRQ>

}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b002      	add	sp, #8
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	40021000 	.word	0x40021000

080009d0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b089      	sub	sp, #36	; 0x24
 80009d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d6:	240c      	movs	r4, #12
 80009d8:	193b      	adds	r3, r7, r4
 80009da:	0018      	movs	r0, r3
 80009dc:	2314      	movs	r3, #20
 80009de:	001a      	movs	r2, r3
 80009e0:	2100      	movs	r1, #0
 80009e2:	f002 fca5 	bl	8003330 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	4b45      	ldr	r3, [pc, #276]	; (8000afc <_ZL12MX_GPIO_Initv+0x12c>)
 80009e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009ea:	4b44      	ldr	r3, [pc, #272]	; (8000afc <_ZL12MX_GPIO_Initv+0x12c>)
 80009ec:	2101      	movs	r1, #1
 80009ee:	430a      	orrs	r2, r1
 80009f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80009f2:	4b42      	ldr	r3, [pc, #264]	; (8000afc <_ZL12MX_GPIO_Initv+0x12c>)
 80009f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f6:	2201      	movs	r2, #1
 80009f8:	4013      	ands	r3, r2
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	4b3f      	ldr	r3, [pc, #252]	; (8000afc <_ZL12MX_GPIO_Initv+0x12c>)
 8000a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a02:	4b3e      	ldr	r3, [pc, #248]	; (8000afc <_ZL12MX_GPIO_Initv+0x12c>)
 8000a04:	2102      	movs	r1, #2
 8000a06:	430a      	orrs	r2, r1
 8000a08:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a0a:	4b3c      	ldr	r3, [pc, #240]	; (8000afc <_ZL12MX_GPIO_Initv+0x12c>)
 8000a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0e:	2202      	movs	r2, #2
 8000a10:	4013      	ands	r3, r2
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a16:	23a0      	movs	r3, #160	; 0xa0
 8000a18:	05db      	lsls	r3, r3, #23
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	21e0      	movs	r1, #224	; 0xe0
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f001 fbcd 	bl	80021be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	4835      	ldr	r0, [pc, #212]	; (8000b00 <_ZL12MX_GPIO_Initv+0x130>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	0019      	movs	r1, r3
 8000a2e:	f001 fbc6 	bl	80021be <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	2203      	movs	r2, #3
 8000a36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	193b      	adds	r3, r7, r4
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	193b      	adds	r3, r7, r4
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a44:	193b      	adds	r3, r7, r4
 8000a46:	2203      	movs	r2, #3
 8000a48:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	2206      	movs	r2, #6
 8000a4e:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a50:	193a      	adds	r2, r7, r4
 8000a52:	23a0      	movs	r3, #160	; 0xa0
 8000a54:	05db      	lsls	r3, r3, #23
 8000a56:	0011      	movs	r1, r2
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f001 fa15 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a5e:	193b      	adds	r3, r7, r4
 8000a60:	22e0      	movs	r2, #224	; 0xe0
 8000a62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	2201      	movs	r2, #1
 8000a68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	193b      	adds	r3, r7, r4
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	193a      	adds	r2, r7, r4
 8000a78:	23a0      	movs	r3, #160	; 0xa0
 8000a7a:	05db      	lsls	r3, r3, #23
 8000a7c:	0011      	movs	r1, r2
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f001 fa02 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a84:	0021      	movs	r1, r4
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	22f0      	movs	r2, #240	; 0xf0
 8000a8a:	0212      	lsls	r2, r2, #8
 8000a8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8e:	000c      	movs	r4, r1
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	2200      	movs	r2, #0
 8000a94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	193b      	adds	r3, r7, r4
 8000a9e:	4a18      	ldr	r2, [pc, #96]	; (8000b00 <_ZL12MX_GPIO_Initv+0x130>)
 8000aa0:	0019      	movs	r1, r3
 8000aa2:	0010      	movs	r0, r2
 8000aa4:	f001 f9f0 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000aa8:	193b      	adds	r3, r7, r4
 8000aaa:	22f0      	movs	r2, #240	; 0xf0
 8000aac:	0112      	lsls	r2, r2, #4
 8000aae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab0:	193b      	adds	r3, r7, r4
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abc:	193a      	adds	r2, r7, r4
 8000abe:	23a0      	movs	r3, #160	; 0xa0
 8000ac0:	05db      	lsls	r3, r3, #23
 8000ac2:	0011      	movs	r1, r2
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f001 f9df 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000aca:	0021      	movs	r1, r4
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2280      	movs	r2, #128	; 0x80
 8000ad0:	0092      	lsls	r2, r2, #2
 8000ad2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <_ZL12MX_GPIO_Initv+0x130>)
 8000aea:	0019      	movs	r1, r3
 8000aec:	0010      	movs	r0, r2
 8000aee:	f001 f9cb 	bl	8001e88 <HAL_GPIO_Init>

}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b009      	add	sp, #36	; 0x24
 8000af8:	bd90      	pop	{r4, r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	40021000 	.word	0x40021000
 8000b00:	50000400 	.word	0x50000400

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <Error_Handler+0x8>
	...

08000b10 <_Z13colorExtenderm>:
 */

#include "pixelArray.h"


dmaPixel colorExtender(uint32_t color) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08c      	sub	sp, #48	; 0x30
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]

	// This swaps each nibble, to resolve an issue discovered during testing (probably a MSB/LSB issue I'm not interested in researching further. This fixes the problem so cutting it here.
	uint32_t colorswap = (0xF0F0F0 & color) >> 4;
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	091b      	lsrs	r3, r3, #4
 8000b1e:	4a95      	ldr	r2, [pc, #596]	; (8000d74 <_Z13colorExtenderm+0x264>)
 8000b20:	4013      	ands	r3, r2
 8000b22:	61fb      	str	r3, [r7, #28]
	color = (0x0F0F0F & color) << 4;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	011b      	lsls	r3, r3, #4
 8000b28:	4a93      	ldr	r2, [pc, #588]	; (8000d78 <_Z13colorExtenderm+0x268>)
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	603b      	str	r3, [r7, #0]
	color = color | colorswap;
 8000b2e:	683a      	ldr	r2, [r7, #0]
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	603b      	str	r3, [r7, #0]
	// converts standard color format 0xRRGGBB to extended color format for DMA buffer
	dmaPixel retVal;

	// Initliaze each color to the ZERO pattern, 0xc6318c6318
	// Don't try zero pattern, 0x84 0x21 0x08 0x42 0x10
	retVal.green[0] = retVal.red[0] = retVal.blue[0] = 0xc6;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	22c6      	movs	r2, #198	; 0xc6
 8000b3a:	729a      	strb	r2, [r3, #10]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	7a9a      	ldrb	r2, [r3, #10]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	715a      	strb	r2, [r3, #5]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	795a      	ldrb	r2, [r3, #5]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	701a      	strb	r2, [r3, #0]
	retVal.green[1] = retVal.red[1] = retVal.blue[1] = 0x31;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2231      	movs	r2, #49	; 0x31
 8000b50:	72da      	strb	r2, [r3, #11]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	7ada      	ldrb	r2, [r3, #11]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	719a      	strb	r2, [r3, #6]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	799a      	ldrb	r2, [r3, #6]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	705a      	strb	r2, [r3, #1]
	retVal.green[2] = retVal.red[2] = retVal.blue[2] = 0x8c;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	228c      	movs	r2, #140	; 0x8c
 8000b66:	731a      	strb	r2, [r3, #12]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	7b1a      	ldrb	r2, [r3, #12]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	71da      	strb	r2, [r3, #7]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	79da      	ldrb	r2, [r3, #7]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	709a      	strb	r2, [r3, #2]
	retVal.green[3] = retVal.red[3] = retVal.blue[3] = 0x63;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2263      	movs	r2, #99	; 0x63
 8000b7c:	735a      	strb	r2, [r3, #13]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	7b5a      	ldrb	r2, [r3, #13]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	721a      	strb	r2, [r3, #8]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	7a1a      	ldrb	r2, [r3, #8]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	70da      	strb	r2, [r3, #3]
	retVal.green[4] = retVal.red[4] = retVal.blue[4] = 0x18;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2218      	movs	r2, #24
 8000b92:	739a      	strb	r2, [r3, #14]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	7b9a      	ldrb	r2, [r3, #14]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	725a      	strb	r2, [r3, #9]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	7a5a      	ldrb	r2, [r3, #9]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	711a      	strb	r2, [r3, #4]

	// Create a comparison variable with same length as color to perform bitwise comparisons
	uint32_t compare = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61bb      	str	r3, [r7, #24]

	// Loop i for each valid bit in color, sectioned off to reorder RGB to GRB
	for (int i = 0; i < 8; ++i) {
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bae:	2b07      	cmp	r3, #7
 8000bb0:	dc34      	bgt.n	8000c1c <_Z13colorExtenderm+0x10c>
		// Shift over the comparison bit i times.
		compare = 1 << i;
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb6:	409a      	lsls	r2, r3
 8000bb8:	0013      	movs	r3, r2
 8000bba:	61bb      	str	r3, [r7, #24]
		// Only proceed if color has a valid bit at the location shifted to above
		if (color & compare) {
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	69ba      	ldr	r2, [r7, #24]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	d027      	beq.n	8000c14 <_Z13colorExtenderm+0x104>
			// This is to match the pattern of 11x00 11x00 11x00...
			// Starts at bit 2 and increments 5 each i
			int index = 5*i + 2;
 8000bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000bc6:	0013      	movs	r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	189b      	adds	r3, r3, r2
 8000bcc:	3302      	adds	r3, #2
 8000bce:	617b      	str	r3, [r7, #20]


			// Indexes the color value of the dmaPixel and sets it accordingly.
			retVal.blue[4 - index / 8] |= (1 << (index % 8));
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	da00      	bge.n	8000bd8 <_Z13colorExtenderm+0xc8>
 8000bd6:	3307      	adds	r3, #7
 8000bd8:	10db      	asrs	r3, r3, #3
 8000bda:	001a      	movs	r2, r3
 8000bdc:	2304      	movs	r3, #4
 8000bde:	1a9b      	subs	r3, r3, r2
 8000be0:	6879      	ldr	r1, [r7, #4]
 8000be2:	18cb      	adds	r3, r1, r3
 8000be4:	7a9b      	ldrb	r3, [r3, #10]
 8000be6:	b259      	sxtb	r1, r3
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	4864      	ldr	r0, [pc, #400]	; (8000d7c <_Z13colorExtenderm+0x26c>)
 8000bec:	4003      	ands	r3, r0
 8000bee:	d504      	bpl.n	8000bfa <_Z13colorExtenderm+0xea>
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	2008      	movs	r0, #8
 8000bf4:	4240      	negs	r0, r0
 8000bf6:	4303      	orrs	r3, r0
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	4083      	lsls	r3, r0
 8000c00:	b25b      	sxtb	r3, r3
 8000c02:	430b      	orrs	r3, r1
 8000c04:	b259      	sxtb	r1, r3
 8000c06:	2304      	movs	r3, #4
 8000c08:	1a9b      	subs	r3, r3, r2
 8000c0a:	b2c9      	uxtb	r1, r1
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	18d3      	adds	r3, r2, r3
 8000c10:	1c0a      	adds	r2, r1, #0
 8000c12:	729a      	strb	r2, [r3, #10]
	for (int i = 0; i < 8; ++i) {
 8000c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c16:	3301      	adds	r3, #1
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c1a:	e7c7      	b.n	8000bac <_Z13colorExtenderm+0x9c>

			//int index0 = index-1;
			//retVal.blue[4 - index0 / 8] |= (1 << (index0 % 8));
		}
	}
	for (int i = 8; i < 16; ++i) {
 8000c1c:	2308      	movs	r3, #8
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c22:	2b0f      	cmp	r3, #15
 8000c24:	dc33      	bgt.n	8000c8e <_Z13colorExtenderm+0x17e>
		compare = 1 << i;
 8000c26:	2201      	movs	r2, #1
 8000c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c2a:	409a      	lsls	r2, r3
 8000c2c:	0013      	movs	r3, r2
 8000c2e:	61bb      	str	r3, [r7, #24]
		if (color & compare) {
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	4013      	ands	r3, r2
 8000c36:	d026      	beq.n	8000c86 <_Z13colorExtenderm+0x176>
			int index = 5*(i-8) + 2;
 8000c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c3a:	3b08      	subs	r3, #8
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	0013      	movs	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	189b      	adds	r3, r3, r2
 8000c44:	3302      	adds	r3, #2
 8000c46:	613b      	str	r3, [r7, #16]
			retVal.green[4 - index / 8] |= (1 << (index % 8));
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	da00      	bge.n	8000c50 <_Z13colorExtenderm+0x140>
 8000c4e:	3307      	adds	r3, #7
 8000c50:	10db      	asrs	r3, r3, #3
 8000c52:	001a      	movs	r2, r3
 8000c54:	2304      	movs	r3, #4
 8000c56:	1a9b      	subs	r3, r3, r2
 8000c58:	6879      	ldr	r1, [r7, #4]
 8000c5a:	5ccb      	ldrb	r3, [r1, r3]
 8000c5c:	b259      	sxtb	r1, r3
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	4846      	ldr	r0, [pc, #280]	; (8000d7c <_Z13colorExtenderm+0x26c>)
 8000c62:	4003      	ands	r3, r0
 8000c64:	d504      	bpl.n	8000c70 <_Z13colorExtenderm+0x160>
 8000c66:	3b01      	subs	r3, #1
 8000c68:	2008      	movs	r0, #8
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	4303      	orrs	r3, r0
 8000c6e:	3301      	adds	r3, #1
 8000c70:	0018      	movs	r0, r3
 8000c72:	2301      	movs	r3, #1
 8000c74:	4083      	lsls	r3, r0
 8000c76:	b25b      	sxtb	r3, r3
 8000c78:	430b      	orrs	r3, r1
 8000c7a:	b259      	sxtb	r1, r3
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	1a9b      	subs	r3, r3, r2
 8000c80:	b2c9      	uxtb	r1, r1
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	54d1      	strb	r1, [r2, r3]
	for (int i = 8; i < 16; ++i) {
 8000c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c88:	3301      	adds	r3, #1
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c8c:	e7c8      	b.n	8000c20 <_Z13colorExtenderm+0x110>
			//int index0 = index-1;
			//retVal.green[4 - index0 / 8] |= (1 << (index0 % 8));
		}

	}
	for (int i = 16; i < 24; ++i) {
 8000c8e:	2310      	movs	r3, #16
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
 8000c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c94:	2b17      	cmp	r3, #23
 8000c96:	dc36      	bgt.n	8000d06 <_Z13colorExtenderm+0x1f6>
		compare = 1 << i;
 8000c98:	2201      	movs	r2, #1
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9c:	409a      	lsls	r2, r3
 8000c9e:	0013      	movs	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
		if (color & compare) {
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	d029      	beq.n	8000cfe <_Z13colorExtenderm+0x1ee>
			int index = 5*(i-16) + 2;
 8000caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cac:	3b10      	subs	r3, #16
 8000cae:	001a      	movs	r2, r3
 8000cb0:	0013      	movs	r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	189b      	adds	r3, r3, r2
 8000cb6:	3302      	adds	r3, #2
 8000cb8:	60fb      	str	r3, [r7, #12]
			retVal.red[4 - index / 8] |= (1 << (index % 8));
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	da00      	bge.n	8000cc2 <_Z13colorExtenderm+0x1b2>
 8000cc0:	3307      	adds	r3, #7
 8000cc2:	10db      	asrs	r3, r3, #3
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	1a9b      	subs	r3, r3, r2
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	18cb      	adds	r3, r1, r3
 8000cce:	795b      	ldrb	r3, [r3, #5]
 8000cd0:	b259      	sxtb	r1, r3
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	4829      	ldr	r0, [pc, #164]	; (8000d7c <_Z13colorExtenderm+0x26c>)
 8000cd6:	4003      	ands	r3, r0
 8000cd8:	d504      	bpl.n	8000ce4 <_Z13colorExtenderm+0x1d4>
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	2008      	movs	r0, #8
 8000cde:	4240      	negs	r0, r0
 8000ce0:	4303      	orrs	r3, r0
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	4083      	lsls	r3, r0
 8000cea:	b25b      	sxtb	r3, r3
 8000cec:	430b      	orrs	r3, r1
 8000cee:	b259      	sxtb	r1, r3
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	1a9b      	subs	r3, r3, r2
 8000cf4:	b2c9      	uxtb	r1, r1
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	18d3      	adds	r3, r2, r3
 8000cfa:	1c0a      	adds	r2, r1, #0
 8000cfc:	715a      	strb	r2, [r3, #5]
	for (int i = 16; i < 24; ++i) {
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d00:	3301      	adds	r3, #1
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
 8000d04:	e7c5      	b.n	8000c92 <_Z13colorExtenderm+0x182>
			//int index0 = index-1;
			//retVal.red[4 - index0 / 8] |= (1 << (index0 % 8));
		}

	}
	for (int i = 0; i < 15; ++i) {
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
 8000d0a:	6a3b      	ldr	r3, [r7, #32]
 8000d0c:	2b0e      	cmp	r3, #14
 8000d0e:	dc2b      	bgt.n	8000d68 <_Z13colorExtenderm+0x258>
		if (i < 5) {
 8000d10:	6a3b      	ldr	r3, [r7, #32]
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	dc0a      	bgt.n	8000d2c <_Z13colorExtenderm+0x21c>
			retVal.total[i] = retVal.green[i];
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	6a3b      	ldr	r3, [r7, #32]
 8000d1a:	18d3      	adds	r3, r2, r3
 8000d1c:	7819      	ldrb	r1, [r3, #0]
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	6a3b      	ldr	r3, [r7, #32]
 8000d22:	18d3      	adds	r3, r2, r3
 8000d24:	330f      	adds	r3, #15
 8000d26:	1c0a      	adds	r2, r1, #0
 8000d28:	701a      	strb	r2, [r3, #0]
 8000d2a:	e019      	b.n	8000d60 <_Z13colorExtenderm+0x250>
		} else if (i < 10) {
 8000d2c:	6a3b      	ldr	r3, [r7, #32]
 8000d2e:	2b09      	cmp	r3, #9
 8000d30:	dc0b      	bgt.n	8000d4a <_Z13colorExtenderm+0x23a>
			retVal.total[i] = retVal.red[i-5];
 8000d32:	6a3b      	ldr	r3, [r7, #32]
 8000d34:	3b05      	subs	r3, #5
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	18d3      	adds	r3, r2, r3
 8000d3a:	7959      	ldrb	r1, [r3, #5]
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	6a3b      	ldr	r3, [r7, #32]
 8000d40:	18d3      	adds	r3, r2, r3
 8000d42:	330f      	adds	r3, #15
 8000d44:	1c0a      	adds	r2, r1, #0
 8000d46:	701a      	strb	r2, [r3, #0]
 8000d48:	e00a      	b.n	8000d60 <_Z13colorExtenderm+0x250>
		} else {
			retVal.total[i] = retVal.blue[i-10];
 8000d4a:	6a3b      	ldr	r3, [r7, #32]
 8000d4c:	3b0a      	subs	r3, #10
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	18d3      	adds	r3, r2, r3
 8000d52:	7a99      	ldrb	r1, [r3, #10]
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	6a3b      	ldr	r3, [r7, #32]
 8000d58:	18d3      	adds	r3, r2, r3
 8000d5a:	330f      	adds	r3, #15
 8000d5c:	1c0a      	adds	r2, r1, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 15; ++i) {
 8000d60:	6a3b      	ldr	r3, [r7, #32]
 8000d62:	3301      	adds	r3, #1
 8000d64:	623b      	str	r3, [r7, #32]
 8000d66:	e7d0      	b.n	8000d0a <_Z13colorExtenderm+0x1fa>
		}
	}
	return retVal;
 8000d68:	46c0      	nop			; (mov r8, r8)

}
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b00c      	add	sp, #48	; 0x30
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	000f0f0f 	.word	0x000f0f0f
 8000d78:	00f0f0f0 	.word	0x00f0f0f0
 8000d7c:	80000007 	.word	0x80000007

08000d80 <_ZN10pixelArray8setPixelEmii>:



void pixelArray::setPixel(uint32_t color, int column, int row) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08e      	sub	sp, #56	; 0x38
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	603b      	str	r3, [r7, #0]
	dmaPixel extendedColor = colorExtender(color);
 8000d8e:	2310      	movs	r3, #16
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	0011      	movs	r1, r2
 8000d96:	0018      	movs	r0, r3
 8000d98:	f7ff feba 	bl	8000b10 <_Z13colorExtenderm>
	int index = (row*8 + column) * 15;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	00da      	lsls	r2, r3, #3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	18d2      	adds	r2, r2, r3
 8000da4:	0013      	movs	r3, r2
 8000da6:	011b      	lsls	r3, r3, #4
 8000da8:	1a9b      	subs	r3, r3, r2
 8000daa:	633b      	str	r3, [r7, #48]	; 0x30
	for (int i = index; i < index+15; ++i) {
 8000dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dae:	637b      	str	r3, [r7, #52]	; 0x34
 8000db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db2:	330e      	adds	r3, #14
 8000db4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000db6:	429a      	cmp	r2, r3
 8000db8:	dc0f      	bgt.n	8000dda <_ZN10pixelArray8setPixelEmii+0x5a>
		buffer[i] = extendedColor.total[i-index];
 8000dba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	2210      	movs	r2, #16
 8000dc2:	18ba      	adds	r2, r7, r2
 8000dc4:	18d3      	adds	r3, r2, r3
 8000dc6:	7bd9      	ldrb	r1, [r3, #15]
 8000dc8:	68fa      	ldr	r2, [r7, #12]
 8000dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dcc:	18d3      	adds	r3, r2, r3
 8000dce:	1c0a      	adds	r2, r1, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
	for (int i = index; i < index+15; ++i) {
 8000dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8000dd8:	e7ea      	b.n	8000db0 <_ZN10pixelArray8setPixelEmii+0x30>
	}
	return;
 8000dda:	46c0      	nop			; (mov r8, r8)
}
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b00e      	add	sp, #56	; 0x38
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <_ZN10pixelArray8setStripEm>:

void pixelArray::setStrip(uint32_t color) {
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b08e      	sub	sp, #56	; 0x38
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	6039      	str	r1, [r7, #0]
	dmaPixel extendedColor = colorExtender(color);
 8000dec:	230c      	movs	r3, #12
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	683a      	ldr	r2, [r7, #0]
 8000df2:	0011      	movs	r1, r2
 8000df4:	0018      	movs	r0, r3
 8000df6:	f7ff fe8b 	bl	8000b10 <_Z13colorExtenderm>
	for (int i = 0; i < length; ++i) {
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	23fd      	movs	r3, #253	; 0xfd
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	58d3      	ldr	r3, [r2, r3]
 8000e06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	da1a      	bge.n	8000e42 <_ZN10pixelArray8setStripEm+0x60>
		for (int j = 0; j < 15; ++j) {
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	633b      	str	r3, [r7, #48]	; 0x30
 8000e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e12:	2b0e      	cmp	r3, #14
 8000e14:	dc11      	bgt.n	8000e3a <_ZN10pixelArray8setStripEm+0x58>
			buffer[i*15+j] = extendedColor.total[j];
 8000e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e18:	0013      	movs	r3, r2
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	1a9a      	subs	r2, r3, r2
 8000e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e20:	18d3      	adds	r3, r2, r3
 8000e22:	220c      	movs	r2, #12
 8000e24:	18b9      	adds	r1, r7, r2
 8000e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e28:	188a      	adds	r2, r1, r2
 8000e2a:	320f      	adds	r2, #15
 8000e2c:	7811      	ldrb	r1, [r2, #0]
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	54d1      	strb	r1, [r2, r3]
		for (int j = 0; j < 15; ++j) {
 8000e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e34:	3301      	adds	r3, #1
 8000e36:	633b      	str	r3, [r7, #48]	; 0x30
 8000e38:	e7ea      	b.n	8000e10 <_ZN10pixelArray8setStripEm+0x2e>
	for (int i = 0; i < length; ++i) {
 8000e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8000e40:	e7dd      	b.n	8000dfe <_ZN10pixelArray8setStripEm+0x1c>
		}
	}

	for (int i = length*15; i < buffer_length; ++i) {
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	23fd      	movs	r3, #253	; 0xfd
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	58d2      	ldr	r2, [r2, r3]
 8000e4a:	0013      	movs	r3, r2
 8000e4c:	011b      	lsls	r3, r3, #4
 8000e4e:	1a9b      	subs	r3, r3, r2
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	23fe      	movs	r3, #254	; 0xfe
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	58d3      	ldr	r3, [r2, r3]
 8000e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	da08      	bge.n	8000e72 <_ZN10pixelArray8setStripEm+0x90>
		buffer[i] = 0;
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e64:	18d3      	adds	r3, r2, r3
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
	for (int i = length*15; i < buffer_length; ++i) {
 8000e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e70:	e7ef      	b.n	8000e52 <_ZN10pixelArray8setStripEm+0x70>
	}
	return;
 8000e72:	46c0      	nop			; (mov r8, r8)
}
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b00e      	add	sp, #56	; 0x38
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <_ZN10pixelArray5resetEv>:

void pixelArray::reset() {
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b084      	sub	sp, #16
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < buffer_length; i+=5) {
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	23fe      	movs	r3, #254	; 0xfe
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	58d3      	ldr	r3, [r2, r3]
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	da1c      	bge.n	8000ece <_ZN10pixelArray5resetEv+0x54>
			buffer[i] = 0xC6;
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	18d3      	adds	r3, r2, r3
 8000e9a:	22c6      	movs	r2, #198	; 0xc6
 8000e9c:	701a      	strb	r2, [r3, #0]
			buffer[i+1] = 0x31;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	2131      	movs	r1, #49	; 0x31
 8000ea6:	54d1      	strb	r1, [r2, r3]
			buffer[i+2] = 0x8C;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	3302      	adds	r3, #2
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	218c      	movs	r1, #140	; 0x8c
 8000eb0:	54d1      	strb	r1, [r2, r3]
			buffer[i+3] = 0x63;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	3303      	adds	r3, #3
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	2163      	movs	r1, #99	; 0x63
 8000eba:	54d1      	strb	r1, [r2, r3]
			buffer[i+4] = 0x18;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	3304      	adds	r3, #4
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	2118      	movs	r1, #24
 8000ec4:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < buffer_length; i+=5) {
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	3305      	adds	r3, #5
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	e7db      	b.n	8000e86 <_ZN10pixelArray5resetEv+0xc>
		}
	for (int i = length*15; i < buffer_length; ++i) {
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	23fd      	movs	r3, #253	; 0xfd
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	58d2      	ldr	r2, [r2, r3]
 8000ed6:	0013      	movs	r3, r2
 8000ed8:	011b      	lsls	r3, r3, #4
 8000eda:	1a9b      	subs	r3, r3, r2
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	23fe      	movs	r3, #254	; 0xfe
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	58d3      	ldr	r3, [r2, r3]
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	da08      	bge.n	8000efe <_ZN10pixelArray5resetEv+0x84>
			buffer[i] = 0;
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	18d3      	adds	r3, r2, r3
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
	for (int i = length*15; i < buffer_length; ++i) {
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	e7ef      	b.n	8000ede <_ZN10pixelArray5resetEv+0x64>
		}
	return;
 8000efe:	46c0      	nop			; (mov r8, r8)
}
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b004      	add	sp, #16
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <_ZN10pixelArray10initializeEi>:

void pixelArray::initialize(int len) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
	length = len;
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	23fd      	movs	r3, #253	; 0xfd
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	6839      	ldr	r1, [r7, #0]
 8000f1a:	50d1      	str	r1, [r2, r3]
	length = 64;
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	23fd      	movs	r3, #253	; 0xfd
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	2140      	movs	r1, #64	; 0x40
 8000f24:	50d1      	str	r1, [r2, r3]
	buffer_length = len*15 + 50;
 8000f26:	683a      	ldr	r2, [r7, #0]
 8000f28:	0013      	movs	r3, r2
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	1a9b      	subs	r3, r3, r2
 8000f2e:	3332      	adds	r3, #50	; 0x32
 8000f30:	0019      	movs	r1, r3
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	23fe      	movs	r3, #254	; 0xfe
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	50d1      	str	r1, [r2, r3]
	//buffer = new uint8_t(buffer_length);
	this->reset();
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f7ff ff9c 	bl	8000e7a <_ZN10pixelArray5resetEv>
	primary = 0x010001;
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	23ff      	movs	r3, #255	; 0xff
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	4905      	ldr	r1, [pc, #20]	; (8000f60 <_ZN10pixelArray10initializeEi+0x58>)
 8000f4a:	50d1      	str	r1, [r2, r3]
	secondary = 0x050010;
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	2380      	movs	r3, #128	; 0x80
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	4904      	ldr	r1, [pc, #16]	; (8000f64 <_ZN10pixelArray10initializeEi+0x5c>)
 8000f54:	50d1      	str	r1, [r2, r3]
	return;
 8000f56:	46c0      	nop			; (mov r8, r8)

}
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b002      	add	sp, #8
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	00010001 	.word	0x00010001
 8000f64:	00050010 	.word	0x00050010

08000f68 <_ZN10pixelArray11passThroughEP11switchArray>:

void pixelArray::passThrough(switchArray* swArray) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
	for (int row = 0; row < 8; ++row) {
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2b07      	cmp	r3, #7
 8000f7a:	dc2b      	bgt.n	8000fd4 <_ZN10pixelArray11passThroughEP11switchArray+0x6c>
		for (int column = 0; column < 8; ++column) {
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	2b07      	cmp	r3, #7
 8000f84:	dc22      	bgt.n	8000fcc <_ZN10pixelArray11passThroughEP11switchArray+0x64>
			if (swArray->read(column, row)) {
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f000 f96e 	bl	800126e <_ZN11switchArray4readEii>
 8000f92:	0003      	movs	r3, r0
 8000f94:	1e5a      	subs	r2, r3, #1
 8000f96:	4193      	sbcs	r3, r2
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d009      	beq.n	8000fb2 <_ZN10pixelArray11passThroughEP11switchArray+0x4a>
				this->setPixel(primary, column, row);
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	23ff      	movs	r3, #255	; 0xff
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	58d1      	ldr	r1, [r2, r3]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	68ba      	ldr	r2, [r7, #8]
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff fee8 	bl	8000d80 <_ZN10pixelArray8setPixelEmii>
 8000fb0:	e008      	b.n	8000fc4 <_ZN10pixelArray11passThroughEP11switchArray+0x5c>
			} else {
				this->setPixel(secondary, column, row);
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	58d1      	ldr	r1, [r2, r3]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	68ba      	ldr	r2, [r7, #8]
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff fede 	bl	8000d80 <_ZN10pixelArray8setPixelEmii>
		for (int column = 0; column < 8; ++column) {
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	e7d9      	b.n	8000f80 <_ZN10pixelArray11passThroughEP11switchArray+0x18>
	for (int row = 0; row < 8; ++row) {
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	e7d0      	b.n	8000f76 <_ZN10pixelArray11passThroughEP11switchArray+0xe>
			}
		}
	}

	return;
 8000fd4:	46c0      	nop			; (mov r8, r8)
}
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b004      	add	sp, #16
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe0:	4b07      	ldr	r3, [pc, #28]	; (8001000 <HAL_MspInit+0x24>)
 8000fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_MspInit+0x24>)
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <HAL_MspInit+0x24>)
 8000fee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <HAL_MspInit+0x24>)
 8000ff2:	2180      	movs	r1, #128	; 0x80
 8000ff4:	0549      	lsls	r1, r1, #21
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40021000 	.word	0x40021000

08001004 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b089      	sub	sp, #36	; 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	240c      	movs	r4, #12
 800100e:	193b      	adds	r3, r7, r4
 8001010:	0018      	movs	r0, r3
 8001012:	2314      	movs	r3, #20
 8001014:	001a      	movs	r2, r3
 8001016:	2100      	movs	r1, #0
 8001018:	f002 f98a 	bl	8003330 <memset>
  if(hadc->Instance==ADC1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a14      	ldr	r2, [pc, #80]	; (8001074 <HAL_ADC_MspInit+0x70>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d122      	bne.n	800106c <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <HAL_ADC_MspInit+0x74>)
 8001028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800102a:	4b13      	ldr	r3, [pc, #76]	; (8001078 <HAL_ADC_MspInit+0x74>)
 800102c:	2180      	movs	r1, #128	; 0x80
 800102e:	0089      	lsls	r1, r1, #2
 8001030:	430a      	orrs	r2, r1
 8001032:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001034:	4b10      	ldr	r3, [pc, #64]	; (8001078 <HAL_ADC_MspInit+0x74>)
 8001036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <HAL_ADC_MspInit+0x74>)
 800103a:	2101      	movs	r1, #1
 800103c:	430a      	orrs	r2, r1
 800103e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001040:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <HAL_ADC_MspInit+0x74>)
 8001042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001044:	2201      	movs	r2, #1
 8001046:	4013      	ands	r3, r2
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800104c:	193b      	adds	r3, r7, r4
 800104e:	2204      	movs	r2, #4
 8001050:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001052:	193b      	adds	r3, r7, r4
 8001054:	2203      	movs	r2, #3
 8001056:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	193b      	adds	r3, r7, r4
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	193a      	adds	r2, r7, r4
 8001060:	23a0      	movs	r3, #160	; 0xa0
 8001062:	05db      	lsls	r3, r3, #23
 8001064:	0011      	movs	r1, r2
 8001066:	0018      	movs	r0, r3
 8001068:	f000 ff0e 	bl	8001e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	b009      	add	sp, #36	; 0x24
 8001072:	bd90      	pop	{r4, r7, pc}
 8001074:	40012400 	.word	0x40012400
 8001078:	40021000 	.word	0x40021000

0800107c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b08b      	sub	sp, #44	; 0x2c
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	2414      	movs	r4, #20
 8001086:	193b      	adds	r3, r7, r4
 8001088:	0018      	movs	r0, r3
 800108a:	2314      	movs	r3, #20
 800108c:	001a      	movs	r2, r3
 800108e:	2100      	movs	r1, #0
 8001090:	f002 f94e 	bl	8003330 <memset>
  if(hspi->Instance==SPI1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a3e      	ldr	r2, [pc, #248]	; (8001194 <HAL_SPI_MspInit+0x118>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d175      	bne.n	800118a <HAL_SPI_MspInit+0x10e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800109e:	4b3e      	ldr	r3, [pc, #248]	; (8001198 <HAL_SPI_MspInit+0x11c>)
 80010a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010a2:	4b3d      	ldr	r3, [pc, #244]	; (8001198 <HAL_SPI_MspInit+0x11c>)
 80010a4:	2180      	movs	r1, #128	; 0x80
 80010a6:	0149      	lsls	r1, r1, #5
 80010a8:	430a      	orrs	r2, r1
 80010aa:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ac:	4b3a      	ldr	r3, [pc, #232]	; (8001198 <HAL_SPI_MspInit+0x11c>)
 80010ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010b0:	4b39      	ldr	r3, [pc, #228]	; (8001198 <HAL_SPI_MspInit+0x11c>)
 80010b2:	2101      	movs	r1, #1
 80010b4:	430a      	orrs	r2, r1
 80010b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80010b8:	4b37      	ldr	r3, [pc, #220]	; (8001198 <HAL_SPI_MspInit+0x11c>)
 80010ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010bc:	2201      	movs	r2, #1
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c4:	4b34      	ldr	r3, [pc, #208]	; (8001198 <HAL_SPI_MspInit+0x11c>)
 80010c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010c8:	4b33      	ldr	r3, [pc, #204]	; (8001198 <HAL_SPI_MspInit+0x11c>)
 80010ca:	2102      	movs	r1, #2
 80010cc:	430a      	orrs	r2, r1
 80010ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80010d0:	4b31      	ldr	r3, [pc, #196]	; (8001198 <HAL_SPI_MspInit+0x11c>)
 80010d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d4:	2202      	movs	r2, #2
 80010d6:	4013      	ands	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA12     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010dc:	193b      	adds	r3, r7, r4
 80010de:	2280      	movs	r2, #128	; 0x80
 80010e0:	0152      	lsls	r2, r2, #5
 80010e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	193b      	adds	r3, r7, r4
 80010e6:	2202      	movs	r2, #2
 80010e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	193b      	adds	r3, r7, r4
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f0:	193b      	adds	r3, r7, r4
 80010f2:	2203      	movs	r2, #3
 80010f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80010f6:	193b      	adds	r3, r7, r4
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fc:	193a      	adds	r2, r7, r4
 80010fe:	23a0      	movs	r3, #160	; 0xa0
 8001100:	05db      	lsls	r3, r3, #23
 8001102:	0011      	movs	r1, r2
 8001104:	0018      	movs	r0, r3
 8001106:	f000 febf 	bl	8001e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800110a:	0021      	movs	r1, r4
 800110c:	187b      	adds	r3, r7, r1
 800110e:	2208      	movs	r2, #8
 8001110:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	187b      	adds	r3, r7, r1
 8001114:	2202      	movs	r2, #2
 8001116:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	187b      	adds	r3, r7, r1
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111e:	187b      	adds	r3, r7, r1
 8001120:	2203      	movs	r2, #3
 8001122:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001124:	187b      	adds	r3, r7, r1
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112a:	187b      	adds	r3, r7, r1
 800112c:	4a1b      	ldr	r2, [pc, #108]	; (800119c <HAL_SPI_MspInit+0x120>)
 800112e:	0019      	movs	r1, r3
 8001130:	0010      	movs	r0, r2
 8001132:	f000 fea9 	bl	8001e88 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <HAL_SPI_MspInit+0x124>)
 8001138:	4a1a      	ldr	r2, [pc, #104]	; (80011a4 <HAL_SPI_MspInit+0x128>)
 800113a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <HAL_SPI_MspInit+0x124>)
 800113e:	2201      	movs	r2, #1
 8001140:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <HAL_SPI_MspInit+0x124>)
 8001144:	2210      	movs	r2, #16
 8001146:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <HAL_SPI_MspInit+0x124>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <HAL_SPI_MspInit+0x124>)
 8001150:	2280      	movs	r2, #128	; 0x80
 8001152:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_SPI_MspInit+0x124>)
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <HAL_SPI_MspInit+0x124>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <HAL_SPI_MspInit+0x124>)
 8001162:	2220      	movs	r2, #32
 8001164:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <HAL_SPI_MspInit+0x124>)
 8001168:	22c0      	movs	r2, #192	; 0xc0
 800116a:	0192      	lsls	r2, r2, #6
 800116c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <HAL_SPI_MspInit+0x124>)
 8001170:	0018      	movs	r0, r3
 8001172:	f000 fccf 	bl	8001b14 <HAL_DMA_Init>
 8001176:	1e03      	subs	r3, r0, #0
 8001178:	d001      	beq.n	800117e <HAL_SPI_MspInit+0x102>
    {
      Error_Handler();
 800117a:	f7ff fcc3 	bl	8000b04 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <HAL_SPI_MspInit+0x124>)
 8001182:	649a      	str	r2, [r3, #72]	; 0x48
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_SPI_MspInit+0x124>)
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	46bd      	mov	sp, r7
 800118e:	b00b      	add	sp, #44	; 0x2c
 8001190:	bd90      	pop	{r4, r7, pc}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	40013000 	.word	0x40013000
 8001198:	40021000 	.word	0x40021000
 800119c:	50000400 	.word	0x50000400
 80011a0:	20000140 	.word	0x20000140
 80011a4:	40020030 	.word	0x40020030

080011a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <NMI_Handler+0x4>

080011ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b2:	e7fe      	b.n	80011b2 <HardFault_Handler+0x4>

080011b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011b8:	46c0      	nop			; (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011cc:	f000 f96a 	bl	80014a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d0:	46c0      	nop			; (mov r8, r8)
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <DMA1_Channel2_3_IRQHandler+0x14>)
 80011de:	0018      	movs	r0, r3
 80011e0:	f000 fd76 	bl	8001cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80011e4:	46c0      	nop			; (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	20000140 	.word	0x20000140

080011f0 <_ZN11switchArray3setEii>:
 */

#include "switchArray.h"


void switchArray::set(int column, int row) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
	char mask = 0x80 >> column;
 80011fc:	2280      	movs	r2, #128	; 0x80
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	411a      	asrs	r2, r3
 8001202:	2117      	movs	r1, #23
 8001204:	187b      	adds	r3, r7, r1
 8001206:	701a      	strb	r2, [r3, #0]
	state[row] |= mask;
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	18d3      	adds	r3, r2, r3
 800120e:	781a      	ldrb	r2, [r3, #0]
 8001210:	187b      	adds	r3, r7, r1
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4313      	orrs	r3, r2
 8001216:	b2d9      	uxtb	r1, r3
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	18d3      	adds	r3, r2, r3
 800121e:	1c0a      	adds	r2, r1, #0
 8001220:	701a      	strb	r2, [r3, #0]
	return;
 8001222:	46c0      	nop			; (mov r8, r8)
}
 8001224:	46bd      	mov	sp, r7
 8001226:	b006      	add	sp, #24
 8001228:	bd80      	pop	{r7, pc}

0800122a <_ZN11switchArray5resetEii>:

void switchArray::reset(int column, int row) {
 800122a:	b580      	push	{r7, lr}
 800122c:	b086      	sub	sp, #24
 800122e:	af00      	add	r7, sp, #0
 8001230:	60f8      	str	r0, [r7, #12]
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
	char mask = 0x80 >> column;
 8001236:	2280      	movs	r2, #128	; 0x80
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	411a      	asrs	r2, r3
 800123c:	2117      	movs	r1, #23
 800123e:	187b      	adds	r3, r7, r1
 8001240:	701a      	strb	r2, [r3, #0]
	state[row] &= ~(mask);
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	18d3      	adds	r3, r2, r3
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	b25b      	sxtb	r3, r3
 800124c:	187a      	adds	r2, r7, r1
 800124e:	7812      	ldrb	r2, [r2, #0]
 8001250:	b252      	sxtb	r2, r2
 8001252:	43d2      	mvns	r2, r2
 8001254:	b252      	sxtb	r2, r2
 8001256:	4013      	ands	r3, r2
 8001258:	b25b      	sxtb	r3, r3
 800125a:	b2d9      	uxtb	r1, r3
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	18d3      	adds	r3, r2, r3
 8001262:	1c0a      	adds	r2, r1, #0
 8001264:	701a      	strb	r2, [r3, #0]
	return;
 8001266:	46c0      	nop			; (mov r8, r8)
}
 8001268:	46bd      	mov	sp, r7
 800126a:	b006      	add	sp, #24
 800126c:	bd80      	pop	{r7, pc}

0800126e <_ZN11switchArray4readEii>:

int switchArray::read(int column, int row) {
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	60f8      	str	r0, [r7, #12]
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
	char mask = 0x80 >> column;
 800127a:	2280      	movs	r2, #128	; 0x80
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	411a      	asrs	r2, r3
 8001280:	2117      	movs	r1, #23
 8001282:	187b      	adds	r3, r7, r1
 8001284:	701a      	strb	r2, [r3, #0]
	return (int)(state[row] & mask);
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	18d3      	adds	r3, r2, r3
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	187a      	adds	r2, r7, r1
 8001290:	7812      	ldrb	r2, [r2, #0]
 8001292:	4013      	ands	r3, r2
 8001294:	b2db      	uxtb	r3, r3
}
 8001296:	0018      	movs	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	b006      	add	sp, #24
 800129c:	bd80      	pop	{r7, pc}

0800129e <_ZN11switchArray10initializeEv>:

void switchArray::initialize() {
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
	state[0] = state[1] = state[6] = state[7] = 0xFF;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	22ff      	movs	r2, #255	; 0xff
 80012aa:	71da      	strb	r2, [r3, #7]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	79da      	ldrb	r2, [r3, #7]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	719a      	strb	r2, [r3, #6]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	799a      	ldrb	r2, [r3, #6]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	705a      	strb	r2, [r3, #1]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	785a      	ldrb	r2, [r3, #1]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	701a      	strb	r2, [r3, #0]
	state[2] = state[3] = state[4] = state[5] = 0x00;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	715a      	strb	r2, [r3, #5]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	795a      	ldrb	r2, [r3, #5]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	711a      	strb	r2, [r3, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	791a      	ldrb	r2, [r3, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	70da      	strb	r2, [r3, #3]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	78da      	ldrb	r2, [r3, #3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	709a      	strb	r2, [r3, #2]
	return;
 80012e2:	46c0      	nop			; (mov r8, r8)
}
 80012e4:	46bd      	mov	sp, r7
 80012e6:	b002      	add	sp, #8
 80012e8:	bd80      	pop	{r7, pc}

080012ea <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	af00      	add	r7, sp, #0
	return 1;
 80012ee:	2301      	movs	r3, #1
}
 80012f0:	0018      	movs	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_kill>:

int _kill(int pid, int sig)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001300:	f001 ffe2 	bl	80032c8 <__errno>
 8001304:	0003      	movs	r3, r0
 8001306:	2216      	movs	r2, #22
 8001308:	601a      	str	r2, [r3, #0]
	return -1;
 800130a:	2301      	movs	r3, #1
 800130c:	425b      	negs	r3, r3
}
 800130e:	0018      	movs	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	b002      	add	sp, #8
 8001314:	bd80      	pop	{r7, pc}

08001316 <_exit>:

void _exit (int status)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800131e:	2301      	movs	r3, #1
 8001320:	425a      	negs	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	0011      	movs	r1, r2
 8001326:	0018      	movs	r0, r3
 8001328:	f7ff ffe5 	bl	80012f6 <_kill>
	while (1) {}		/* Make sure we hang here */
 800132c:	e7fe      	b.n	800132c <_exit+0x16>
	...

08001330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001338:	4a14      	ldr	r2, [pc, #80]	; (800138c <_sbrk+0x5c>)
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <_sbrk+0x60>)
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d102      	bne.n	8001352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <_sbrk+0x64>)
 800134e:	4a12      	ldr	r2, [pc, #72]	; (8001398 <_sbrk+0x68>)
 8001350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <_sbrk+0x64>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	18d3      	adds	r3, r2, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	429a      	cmp	r2, r3
 800135e:	d207      	bcs.n	8001370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001360:	f001 ffb2 	bl	80032c8 <__errno>
 8001364:	0003      	movs	r3, r0
 8001366:	220c      	movs	r2, #12
 8001368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800136a:	2301      	movs	r3, #1
 800136c:	425b      	negs	r3, r3
 800136e:	e009      	b.n	8001384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <_sbrk+0x64>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001376:	4b07      	ldr	r3, [pc, #28]	; (8001394 <_sbrk+0x64>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	18d2      	adds	r2, r2, r3
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <_sbrk+0x64>)
 8001380:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001382:	68fb      	ldr	r3, [r7, #12]
}
 8001384:	0018      	movs	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	b006      	add	sp, #24
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20005000 	.word	0x20005000
 8001390:	00000400 	.word	0x00000400
 8001394:	20000188 	.word	0x20000188
 8001398:	200001b0 	.word	0x200001b0

0800139c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80013a8:	480d      	ldr	r0, [pc, #52]	; (80013e0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80013aa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013ac:	480d      	ldr	r0, [pc, #52]	; (80013e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80013ae:	490e      	ldr	r1, [pc, #56]	; (80013e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013b0:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <LoopForever+0xe>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b4:	e002      	b.n	80013bc <LoopCopyDataInit>

080013b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ba:	3304      	adds	r3, #4

080013bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c0:	d3f9      	bcc.n	80013b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c2:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013c4:	4c0b      	ldr	r4, [pc, #44]	; (80013f4 <LoopForever+0x16>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c8:	e001      	b.n	80013ce <LoopFillZerobss>

080013ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013cc:	3204      	adds	r2, #4

080013ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d0:	d3fb      	bcc.n	80013ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80013d2:	f7ff ffe3 	bl	800139c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013d6:	f001 ff7d 	bl	80032d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013da:	f7ff f97d 	bl	80006d8 <main>

080013de <LoopForever>:

LoopForever:
    b LoopForever
 80013de:	e7fe      	b.n	80013de <LoopForever>
   ldr   r0, =_estack
 80013e0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013ec:	0800351c 	.word	0x0800351c
  ldr r2, =_sbss
 80013f0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013f4:	200001ac 	.word	0x200001ac

080013f8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f8:	e7fe      	b.n	80013f8 <ADC1_COMP_IRQHandler>
	...

080013fc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001402:	1dfb      	adds	r3, r7, #7
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_Init+0x3c>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <HAL_Init+0x3c>)
 800140e:	2140      	movs	r1, #64	; 0x40
 8001410:	430a      	orrs	r2, r1
 8001412:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001414:	2003      	movs	r0, #3
 8001416:	f000 f811 	bl	800143c <HAL_InitTick>
 800141a:	1e03      	subs	r3, r0, #0
 800141c:	d003      	beq.n	8001426 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800141e:	1dfb      	adds	r3, r7, #7
 8001420:	2201      	movs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]
 8001424:	e001      	b.n	800142a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001426:	f7ff fdd9 	bl	8000fdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800142a:	1dfb      	adds	r3, r7, #7
 800142c:	781b      	ldrb	r3, [r3, #0]
}
 800142e:	0018      	movs	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	b002      	add	sp, #8
 8001434:	bd80      	pop	{r7, pc}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	40022000 	.word	0x40022000

0800143c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <HAL_InitTick+0x5c>)
 8001446:	681c      	ldr	r4, [r3, #0]
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <HAL_InitTick+0x60>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	0019      	movs	r1, r3
 800144e:	23fa      	movs	r3, #250	; 0xfa
 8001450:	0098      	lsls	r0, r3, #2
 8001452:	f7fe fe59 	bl	8000108 <__udivsi3>
 8001456:	0003      	movs	r3, r0
 8001458:	0019      	movs	r1, r3
 800145a:	0020      	movs	r0, r4
 800145c:	f7fe fe54 	bl	8000108 <__udivsi3>
 8001460:	0003      	movs	r3, r0
 8001462:	0018      	movs	r0, r3
 8001464:	f000 fb49 	bl	8001afa <HAL_SYSTICK_Config>
 8001468:	1e03      	subs	r3, r0, #0
 800146a:	d001      	beq.n	8001470 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e00f      	b.n	8001490 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b03      	cmp	r3, #3
 8001474:	d80b      	bhi.n	800148e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	2301      	movs	r3, #1
 800147a:	425b      	negs	r3, r3
 800147c:	2200      	movs	r2, #0
 800147e:	0018      	movs	r0, r3
 8001480:	f000 fb16 	bl	8001ab0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_InitTick+0x64>)
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e000      	b.n	8001490 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
}
 8001490:	0018      	movs	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	b003      	add	sp, #12
 8001496:	bd90      	pop	{r4, r7, pc}
 8001498:	20000000 	.word	0x20000000
 800149c:	20000008 	.word	0x20000008
 80014a0:	20000004 	.word	0x20000004

080014a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <HAL_IncTick+0x1c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	001a      	movs	r2, r3
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <HAL_IncTick+0x20>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	18d2      	adds	r2, r2, r3
 80014b4:	4b03      	ldr	r3, [pc, #12]	; (80014c4 <HAL_IncTick+0x20>)
 80014b6:	601a      	str	r2, [r3, #0]
}
 80014b8:	46c0      	nop			; (mov r8, r8)
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	20000008 	.word	0x20000008
 80014c4:	20000198 	.word	0x20000198

080014c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  return uwTick;
 80014cc:	4b02      	ldr	r3, [pc, #8]	; (80014d8 <HAL_GetTick+0x10>)
 80014ce:	681b      	ldr	r3, [r3, #0]
}
 80014d0:	0018      	movs	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	20000198 	.word	0x20000198

080014dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e4:	f7ff fff0 	bl	80014c8 <HAL_GetTick>
 80014e8:	0003      	movs	r3, r0
 80014ea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	3301      	adds	r3, #1
 80014f4:	d005      	beq.n	8001502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <HAL_Delay+0x44>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	001a      	movs	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	189b      	adds	r3, r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	f7ff ffe0 	bl	80014c8 <HAL_GetTick>
 8001508:	0002      	movs	r2, r0
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	429a      	cmp	r2, r3
 8001512:	d8f7      	bhi.n	8001504 <HAL_Delay+0x28>
  {
  }
}
 8001514:	46c0      	nop			; (mov r8, r8)
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	46bd      	mov	sp, r7
 800151a:	b004      	add	sp, #16
 800151c:	bd80      	pop	{r7, pc}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	20000008 	.word	0x20000008

08001524 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e159      	b.n	80017ea <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10a      	bne.n	8001554 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2250      	movs	r2, #80	; 0x50
 8001548:	2100      	movs	r1, #0
 800154a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	0018      	movs	r0, r3
 8001550:	f7ff fd58 	bl	8001004 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001558:	2210      	movs	r2, #16
 800155a:	4013      	ands	r3, r2
 800155c:	2b10      	cmp	r3, #16
 800155e:	d005      	beq.n	800156c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2204      	movs	r2, #4
 8001568:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800156a:	d00b      	beq.n	8001584 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001570:	2210      	movs	r2, #16
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2250      	movs	r2, #80	; 0x50
 800157c:	2100      	movs	r1, #0
 800157e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e132      	b.n	80017ea <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001588:	4a9a      	ldr	r2, [pc, #616]	; (80017f4 <HAL_ADC_Init+0x2d0>)
 800158a:	4013      	ands	r3, r2
 800158c:	2202      	movs	r2, #2
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2203      	movs	r2, #3
 800159c:	4013      	ands	r3, r2
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d108      	bne.n	80015b4 <HAL_ADC_Init+0x90>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2201      	movs	r2, #1
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <HAL_ADC_Init+0x90>
 80015b0:	2301      	movs	r3, #1
 80015b2:	e000      	b.n	80015b6 <HAL_ADC_Init+0x92>
 80015b4:	2300      	movs	r3, #0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d149      	bne.n	800164e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	23c0      	movs	r3, #192	; 0xc0
 80015c0:	061b      	lsls	r3, r3, #24
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d00b      	beq.n	80015de <HAL_ADC_Init+0xba>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	2380      	movs	r3, #128	; 0x80
 80015cc:	05db      	lsls	r3, r3, #23
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d005      	beq.n	80015de <HAL_ADC_Init+0xba>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	061b      	lsls	r3, r3, #24
 80015da:	429a      	cmp	r2, r3
 80015dc:	d111      	bne.n	8001602 <HAL_ADC_Init+0xde>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	691a      	ldr	r2, [r3, #16]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	0092      	lsls	r2, r2, #2
 80015ea:	0892      	lsrs	r2, r2, #2
 80015ec:	611a      	str	r2, [r3, #16]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6919      	ldr	r1, [r3, #16]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	611a      	str	r2, [r3, #16]
 8001600:	e014      	b.n	800162c <HAL_ADC_Init+0x108>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	691a      	ldr	r2, [r3, #16]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	0092      	lsls	r2, r2, #2
 800160e:	0892      	lsrs	r2, r2, #2
 8001610:	611a      	str	r2, [r3, #16]
 8001612:	4b79      	ldr	r3, [pc, #484]	; (80017f8 <HAL_ADC_Init+0x2d4>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4b78      	ldr	r3, [pc, #480]	; (80017f8 <HAL_ADC_Init+0x2d4>)
 8001618:	4978      	ldr	r1, [pc, #480]	; (80017fc <HAL_ADC_Init+0x2d8>)
 800161a:	400a      	ands	r2, r1
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	4b76      	ldr	r3, [pc, #472]	; (80017f8 <HAL_ADC_Init+0x2d4>)
 8001620:	6819      	ldr	r1, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	4b74      	ldr	r3, [pc, #464]	; (80017f8 <HAL_ADC_Init+0x2d4>)
 8001628:	430a      	orrs	r2, r1
 800162a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2118      	movs	r1, #24
 8001638:	438a      	bics	r2, r1
 800163a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68d9      	ldr	r1, [r3, #12]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	430a      	orrs	r2, r1
 800164c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800164e:	4b6a      	ldr	r3, [pc, #424]	; (80017f8 <HAL_ADC_Init+0x2d4>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b69      	ldr	r3, [pc, #420]	; (80017f8 <HAL_ADC_Init+0x2d4>)
 8001654:	496a      	ldr	r1, [pc, #424]	; (8001800 <HAL_ADC_Init+0x2dc>)
 8001656:	400a      	ands	r2, r1
 8001658:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800165a:	4b67      	ldr	r3, [pc, #412]	; (80017f8 <HAL_ADC_Init+0x2d4>)
 800165c:	6819      	ldr	r1, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001662:	065a      	lsls	r2, r3, #25
 8001664:	4b64      	ldr	r3, [pc, #400]	; (80017f8 <HAL_ADC_Init+0x2d4>)
 8001666:	430a      	orrs	r2, r1
 8001668:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	055b      	lsls	r3, r3, #21
 8001674:	4013      	ands	r3, r2
 8001676:	d108      	bne.n	800168a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2180      	movs	r1, #128	; 0x80
 8001684:	0549      	lsls	r1, r1, #21
 8001686:	430a      	orrs	r2, r1
 8001688:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68da      	ldr	r2, [r3, #12]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	495b      	ldr	r1, [pc, #364]	; (8001804 <HAL_ADC_Init+0x2e0>)
 8001696:	400a      	ands	r2, r1
 8001698:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68d9      	ldr	r1, [r3, #12]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d101      	bne.n	80016b0 <HAL_ADC_Init+0x18c>
 80016ac:	2304      	movs	r3, #4
 80016ae:	e000      	b.n	80016b2 <HAL_ADC_Init+0x18e>
 80016b0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80016b2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2020      	movs	r0, #32
 80016b8:	5c1b      	ldrb	r3, [r3, r0]
 80016ba:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80016bc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	202c      	movs	r0, #44	; 0x2c
 80016c2:	5c1b      	ldrb	r3, [r3, r0]
 80016c4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80016c6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80016cc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80016d4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80016dc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ea:	23c2      	movs	r3, #194	; 0xc2
 80016ec:	33ff      	adds	r3, #255	; 0xff
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d00b      	beq.n	800170a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68d9      	ldr	r1, [r3, #12]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001700:	431a      	orrs	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2221      	movs	r2, #33	; 0x21
 800170e:	5c9b      	ldrb	r3, [r3, r2]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d11a      	bne.n	800174a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2220      	movs	r2, #32
 8001718:	5c9b      	ldrb	r3, [r3, r2]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d109      	bne.n	8001732 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68da      	ldr	r2, [r3, #12]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2180      	movs	r1, #128	; 0x80
 800172a:	0249      	lsls	r1, r1, #9
 800172c:	430a      	orrs	r2, r1
 800172e:	60da      	str	r2, [r3, #12]
 8001730:	e00b      	b.n	800174a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001736:	2220      	movs	r2, #32
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	2201      	movs	r2, #1
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800174e:	2b01      	cmp	r3, #1
 8001750:	d11f      	bne.n	8001792 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	691a      	ldr	r2, [r3, #16]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	492a      	ldr	r1, [pc, #168]	; (8001808 <HAL_ADC_Init+0x2e4>)
 800175e:	400a      	ands	r2, r1
 8001760:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6919      	ldr	r1, [r3, #16]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001770:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8001776:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	691a      	ldr	r2, [r3, #16]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2101      	movs	r1, #1
 800178c:	430a      	orrs	r2, r1
 800178e:	611a      	str	r2, [r3, #16]
 8001790:	e00e      	b.n	80017b0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	2201      	movs	r2, #1
 800179a:	4013      	ands	r3, r2
 800179c:	2b01      	cmp	r3, #1
 800179e:	d107      	bne.n	80017b0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	691a      	ldr	r2, [r3, #16]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2101      	movs	r1, #1
 80017ac:	438a      	bics	r2, r1
 80017ae:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	695a      	ldr	r2, [r3, #20]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2107      	movs	r1, #7
 80017bc:	438a      	bics	r2, r1
 80017be:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6959      	ldr	r1, [r3, #20]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017dc:	2203      	movs	r2, #3
 80017de:	4393      	bics	r3, r2
 80017e0:	2201      	movs	r2, #1
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	0018      	movs	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	b002      	add	sp, #8
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	fffffefd 	.word	0xfffffefd
 80017f8:	40012708 	.word	0x40012708
 80017fc:	ffc3ffff 	.word	0xffc3ffff
 8001800:	fdffffff 	.word	0xfdffffff
 8001804:	fffe0219 	.word	0xfffe0219
 8001808:	fffffc03 	.word	0xfffffc03

0800180c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2250      	movs	r2, #80	; 0x50
 800181a:	5c9b      	ldrb	r3, [r3, r2]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d101      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x18>
 8001820:	2302      	movs	r3, #2
 8001822:	e06c      	b.n	80018fe <HAL_ADC_ConfigChannel+0xf2>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2250      	movs	r2, #80	; 0x50
 8001828:	2101      	movs	r1, #1
 800182a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	2204      	movs	r2, #4
 8001834:	4013      	ands	r3, r2
 8001836:	d00b      	beq.n	8001850 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183c:	2220      	movs	r2, #32
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2250      	movs	r2, #80	; 0x50
 8001848:	2100      	movs	r1, #0
 800184a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e056      	b.n	80018fe <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	4a2c      	ldr	r2, [pc, #176]	; (8001908 <HAL_ADC_ConfigChannel+0xfc>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d028      	beq.n	80018ac <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	035b      	lsls	r3, r3, #13
 8001866:	0b5a      	lsrs	r2, r3, #13
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	02db      	lsls	r3, r3, #11
 8001878:	4013      	ands	r3, r2
 800187a:	d009      	beq.n	8001890 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 800187c:	4b23      	ldr	r3, [pc, #140]	; (800190c <HAL_ADC_ConfigChannel+0x100>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b22      	ldr	r3, [pc, #136]	; (800190c <HAL_ADC_ConfigChannel+0x100>)
 8001882:	2180      	movs	r1, #128	; 0x80
 8001884:	0409      	lsls	r1, r1, #16
 8001886:	430a      	orrs	r2, r1
 8001888:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800188a:	200a      	movs	r0, #10
 800188c:	f000 f844 	bl	8001918 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	029b      	lsls	r3, r3, #10
 8001898:	4013      	ands	r3, r2
 800189a:	d02b      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <HAL_ADC_ConfigChannel+0x100>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b1a      	ldr	r3, [pc, #104]	; (800190c <HAL_ADC_ConfigChannel+0x100>)
 80018a2:	2180      	movs	r1, #128	; 0x80
 80018a4:	03c9      	lsls	r1, r1, #15
 80018a6:	430a      	orrs	r2, r1
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	e023      	b.n	80018f4 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	035b      	lsls	r3, r3, #13
 80018b8:	0b5b      	lsrs	r3, r3, #13
 80018ba:	43d9      	mvns	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	400a      	ands	r2, r1
 80018c2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	02db      	lsls	r3, r3, #11
 80018cc:	4013      	ands	r3, r2
 80018ce:	d005      	beq.n	80018dc <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80018d0:	4b0e      	ldr	r3, [pc, #56]	; (800190c <HAL_ADC_ConfigChannel+0x100>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b0d      	ldr	r3, [pc, #52]	; (800190c <HAL_ADC_ConfigChannel+0x100>)
 80018d6:	490e      	ldr	r1, [pc, #56]	; (8001910 <HAL_ADC_ConfigChannel+0x104>)
 80018d8:	400a      	ands	r2, r1
 80018da:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	029b      	lsls	r3, r3, #10
 80018e4:	4013      	ands	r3, r2
 80018e6:	d005      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <HAL_ADC_ConfigChannel+0x100>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b07      	ldr	r3, [pc, #28]	; (800190c <HAL_ADC_ConfigChannel+0x100>)
 80018ee:	4909      	ldr	r1, [pc, #36]	; (8001914 <HAL_ADC_ConfigChannel+0x108>)
 80018f0:	400a      	ands	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2250      	movs	r2, #80	; 0x50
 80018f8:	2100      	movs	r1, #0
 80018fa:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	0018      	movs	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	b002      	add	sp, #8
 8001904:	bd80      	pop	{r7, pc}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	00001001 	.word	0x00001001
 800190c:	40012708 	.word	0x40012708
 8001910:	ff7fffff 	.word	0xff7fffff
 8001914:	ffbfffff 	.word	0xffbfffff

08001918 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <ADC_DelayMicroSecond+0x38>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	490b      	ldr	r1, [pc, #44]	; (8001954 <ADC_DelayMicroSecond+0x3c>)
 8001926:	0018      	movs	r0, r3
 8001928:	f7fe fbee 	bl	8000108 <__udivsi3>
 800192c:	0003      	movs	r3, r0
 800192e:	001a      	movs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4353      	muls	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8001936:	e002      	b.n	800193e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	3b01      	subs	r3, #1
 800193c:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1f9      	bne.n	8001938 <ADC_DelayMicroSecond+0x20>
  } 
}
 8001944:	46c0      	nop			; (mov r8, r8)
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	46bd      	mov	sp, r7
 800194a:	b004      	add	sp, #16
 800194c:	bd80      	pop	{r7, pc}
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	20000000 	.word	0x20000000
 8001954:	000f4240 	.word	0x000f4240

08001958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	0002      	movs	r2, r0
 8001960:	1dfb      	adds	r3, r7, #7
 8001962:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001964:	1dfb      	adds	r3, r7, #7
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b7f      	cmp	r3, #127	; 0x7f
 800196a:	d809      	bhi.n	8001980 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196c:	1dfb      	adds	r3, r7, #7
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	001a      	movs	r2, r3
 8001972:	231f      	movs	r3, #31
 8001974:	401a      	ands	r2, r3
 8001976:	4b04      	ldr	r3, [pc, #16]	; (8001988 <__NVIC_EnableIRQ+0x30>)
 8001978:	2101      	movs	r1, #1
 800197a:	4091      	lsls	r1, r2
 800197c:	000a      	movs	r2, r1
 800197e:	601a      	str	r2, [r3, #0]
  }
}
 8001980:	46c0      	nop			; (mov r8, r8)
 8001982:	46bd      	mov	sp, r7
 8001984:	b002      	add	sp, #8
 8001986:	bd80      	pop	{r7, pc}
 8001988:	e000e100 	.word	0xe000e100

0800198c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	0002      	movs	r2, r0
 8001994:	6039      	str	r1, [r7, #0]
 8001996:	1dfb      	adds	r3, r7, #7
 8001998:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800199a:	1dfb      	adds	r3, r7, #7
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b7f      	cmp	r3, #127	; 0x7f
 80019a0:	d828      	bhi.n	80019f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019a2:	4a2f      	ldr	r2, [pc, #188]	; (8001a60 <__NVIC_SetPriority+0xd4>)
 80019a4:	1dfb      	adds	r3, r7, #7
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	b25b      	sxtb	r3, r3
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	33c0      	adds	r3, #192	; 0xc0
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	589b      	ldr	r3, [r3, r2]
 80019b2:	1dfa      	adds	r2, r7, #7
 80019b4:	7812      	ldrb	r2, [r2, #0]
 80019b6:	0011      	movs	r1, r2
 80019b8:	2203      	movs	r2, #3
 80019ba:	400a      	ands	r2, r1
 80019bc:	00d2      	lsls	r2, r2, #3
 80019be:	21ff      	movs	r1, #255	; 0xff
 80019c0:	4091      	lsls	r1, r2
 80019c2:	000a      	movs	r2, r1
 80019c4:	43d2      	mvns	r2, r2
 80019c6:	401a      	ands	r2, r3
 80019c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	019b      	lsls	r3, r3, #6
 80019ce:	22ff      	movs	r2, #255	; 0xff
 80019d0:	401a      	ands	r2, r3
 80019d2:	1dfb      	adds	r3, r7, #7
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	0018      	movs	r0, r3
 80019d8:	2303      	movs	r3, #3
 80019da:	4003      	ands	r3, r0
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019e0:	481f      	ldr	r0, [pc, #124]	; (8001a60 <__NVIC_SetPriority+0xd4>)
 80019e2:	1dfb      	adds	r3, r7, #7
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	b25b      	sxtb	r3, r3
 80019e8:	089b      	lsrs	r3, r3, #2
 80019ea:	430a      	orrs	r2, r1
 80019ec:	33c0      	adds	r3, #192	; 0xc0
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80019f2:	e031      	b.n	8001a58 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019f4:	4a1b      	ldr	r2, [pc, #108]	; (8001a64 <__NVIC_SetPriority+0xd8>)
 80019f6:	1dfb      	adds	r3, r7, #7
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	0019      	movs	r1, r3
 80019fc:	230f      	movs	r3, #15
 80019fe:	400b      	ands	r3, r1
 8001a00:	3b08      	subs	r3, #8
 8001a02:	089b      	lsrs	r3, r3, #2
 8001a04:	3306      	adds	r3, #6
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	18d3      	adds	r3, r2, r3
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	1dfa      	adds	r2, r7, #7
 8001a10:	7812      	ldrb	r2, [r2, #0]
 8001a12:	0011      	movs	r1, r2
 8001a14:	2203      	movs	r2, #3
 8001a16:	400a      	ands	r2, r1
 8001a18:	00d2      	lsls	r2, r2, #3
 8001a1a:	21ff      	movs	r1, #255	; 0xff
 8001a1c:	4091      	lsls	r1, r2
 8001a1e:	000a      	movs	r2, r1
 8001a20:	43d2      	mvns	r2, r2
 8001a22:	401a      	ands	r2, r3
 8001a24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	019b      	lsls	r3, r3, #6
 8001a2a:	22ff      	movs	r2, #255	; 0xff
 8001a2c:	401a      	ands	r2, r3
 8001a2e:	1dfb      	adds	r3, r7, #7
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	0018      	movs	r0, r3
 8001a34:	2303      	movs	r3, #3
 8001a36:	4003      	ands	r3, r0
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a3c:	4809      	ldr	r0, [pc, #36]	; (8001a64 <__NVIC_SetPriority+0xd8>)
 8001a3e:	1dfb      	adds	r3, r7, #7
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	001c      	movs	r4, r3
 8001a44:	230f      	movs	r3, #15
 8001a46:	4023      	ands	r3, r4
 8001a48:	3b08      	subs	r3, #8
 8001a4a:	089b      	lsrs	r3, r3, #2
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	3306      	adds	r3, #6
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	18c3      	adds	r3, r0, r3
 8001a54:	3304      	adds	r3, #4
 8001a56:	601a      	str	r2, [r3, #0]
}
 8001a58:	46c0      	nop			; (mov r8, r8)
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b003      	add	sp, #12
 8001a5e:	bd90      	pop	{r4, r7, pc}
 8001a60:	e000e100 	.word	0xe000e100
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	1e5a      	subs	r2, r3, #1
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	045b      	lsls	r3, r3, #17
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d301      	bcc.n	8001a80 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e010      	b.n	8001aa2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a80:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <SysTick_Config+0x44>)
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	3a01      	subs	r2, #1
 8001a86:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a88:	2301      	movs	r3, #1
 8001a8a:	425b      	negs	r3, r3
 8001a8c:	2103      	movs	r1, #3
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f7ff ff7c 	bl	800198c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <SysTick_Config+0x44>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a9a:	4b04      	ldr	r3, [pc, #16]	; (8001aac <SysTick_Config+0x44>)
 8001a9c:	2207      	movs	r2, #7
 8001a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	b002      	add	sp, #8
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	e000e010 	.word	0xe000e010

08001ab0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	210f      	movs	r1, #15
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	1c02      	adds	r2, r0, #0
 8001ac0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	187b      	adds	r3, r7, r1
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	b25b      	sxtb	r3, r3
 8001aca:	0011      	movs	r1, r2
 8001acc:	0018      	movs	r0, r3
 8001ace:	f7ff ff5d 	bl	800198c <__NVIC_SetPriority>
}
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	b004      	add	sp, #16
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	0002      	movs	r2, r0
 8001ae2:	1dfb      	adds	r3, r7, #7
 8001ae4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae6:	1dfb      	adds	r3, r7, #7
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	b25b      	sxtb	r3, r3
 8001aec:	0018      	movs	r0, r3
 8001aee:	f7ff ff33 	bl	8001958 <__NVIC_EnableIRQ>
}
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b002      	add	sp, #8
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	0018      	movs	r0, r3
 8001b06:	f7ff ffaf 	bl	8001a68 <SysTick_Config>
 8001b0a:	0003      	movs	r3, r0
}
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b002      	add	sp, #8
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e061      	b.n	8001bea <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a32      	ldr	r2, [pc, #200]	; (8001bf4 <HAL_DMA_Init+0xe0>)
 8001b2c:	4694      	mov	ip, r2
 8001b2e:	4463      	add	r3, ip
 8001b30:	2114      	movs	r1, #20
 8001b32:	0018      	movs	r0, r3
 8001b34:	f7fe fae8 	bl	8000108 <__udivsi3>
 8001b38:	0003      	movs	r3, r0
 8001b3a:	009a      	lsls	r2, r3, #2
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a2d      	ldr	r2, [pc, #180]	; (8001bf8 <HAL_DMA_Init+0xe4>)
 8001b44:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2225      	movs	r2, #37	; 0x25
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4a28      	ldr	r2, [pc, #160]	; (8001bfc <HAL_DMA_Init+0xe8>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001b66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	01db      	lsls	r3, r3, #7
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d018      	beq.n	8001bd2 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001ba0:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <HAL_DMA_Init+0xec>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba8:	211c      	movs	r1, #28
 8001baa:	400b      	ands	r3, r1
 8001bac:	210f      	movs	r1, #15
 8001bae:	4099      	lsls	r1, r3
 8001bb0:	000b      	movs	r3, r1
 8001bb2:	43d9      	mvns	r1, r3
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_DMA_Init+0xec>)
 8001bb6:	400a      	ands	r2, r1
 8001bb8:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <HAL_DMA_Init+0xec>)
 8001bbc:	6819      	ldr	r1, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	201c      	movs	r0, #28
 8001bc8:	4003      	ands	r3, r0
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <HAL_DMA_Init+0xec>)
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2225      	movs	r2, #37	; 0x25
 8001bdc:	2101      	movs	r1, #1
 8001bde:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2224      	movs	r2, #36	; 0x24
 8001be4:	2100      	movs	r1, #0
 8001be6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	0018      	movs	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	b004      	add	sp, #16
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	bffdfff8 	.word	0xbffdfff8
 8001bf8:	40020000 	.word	0x40020000
 8001bfc:	ffff800f 	.word	0xffff800f
 8001c00:	400200a8 	.word	0x400200a8

08001c04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
 8001c10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c12:	2317      	movs	r3, #23
 8001c14:	18fb      	adds	r3, r7, r3
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2224      	movs	r2, #36	; 0x24
 8001c1e:	5c9b      	ldrb	r3, [r3, r2]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_DMA_Start_IT+0x24>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e04f      	b.n	8001cc8 <HAL_DMA_Start_IT+0xc4>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2224      	movs	r2, #36	; 0x24
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2225      	movs	r2, #37	; 0x25
 8001c34:	5c9b      	ldrb	r3, [r3, r2]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d13a      	bne.n	8001cb2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2225      	movs	r2, #37	; 0x25
 8001c40:	2102      	movs	r1, #2
 8001c42:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2101      	movs	r1, #1
 8001c56:	438a      	bics	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	68b9      	ldr	r1, [r7, #8]
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 f8e3 	bl	8001e2c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d008      	beq.n	8001c80 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	210e      	movs	r1, #14
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	e00f      	b.n	8001ca0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2104      	movs	r1, #4
 8001c8c:	438a      	bics	r2, r1
 8001c8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	210a      	movs	r1, #10
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2101      	movs	r1, #1
 8001cac:	430a      	orrs	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	e007      	b.n	8001cc2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2224      	movs	r2, #36	; 0x24
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001cba:	2317      	movs	r3, #23
 8001cbc:	18fb      	adds	r3, r7, r3
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001cc2:	2317      	movs	r3, #23
 8001cc4:	18fb      	adds	r3, r7, r3
 8001cc6:	781b      	ldrb	r3, [r3, #0]
}
 8001cc8:	0018      	movs	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	b006      	add	sp, #24
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cec:	221c      	movs	r2, #28
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	409a      	lsls	r2, r3
 8001cf4:	0013      	movs	r3, r2
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d026      	beq.n	8001d4a <HAL_DMA_IRQHandler+0x7a>
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	2204      	movs	r2, #4
 8001d00:	4013      	ands	r3, r2
 8001d02:	d022      	beq.n	8001d4a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d107      	bne.n	8001d20 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2104      	movs	r1, #4
 8001d1c:	438a      	bics	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d24:	221c      	movs	r2, #28
 8001d26:	401a      	ands	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	2104      	movs	r1, #4
 8001d2e:	4091      	lsls	r1, r2
 8001d30:	000a      	movs	r2, r1
 8001d32:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d100      	bne.n	8001d3e <HAL_DMA_IRQHandler+0x6e>
 8001d3c:	e071      	b.n	8001e22 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	0010      	movs	r0, r2
 8001d46:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001d48:	e06b      	b.n	8001e22 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	221c      	movs	r2, #28
 8001d50:	4013      	ands	r3, r2
 8001d52:	2202      	movs	r2, #2
 8001d54:	409a      	lsls	r2, r3
 8001d56:	0013      	movs	r3, r2
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d02d      	beq.n	8001dba <HAL_DMA_IRQHandler+0xea>
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	2202      	movs	r2, #2
 8001d62:	4013      	ands	r3, r2
 8001d64:	d029      	beq.n	8001dba <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2220      	movs	r2, #32
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d10b      	bne.n	8001d8a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	210a      	movs	r1, #10
 8001d7e:	438a      	bics	r2, r1
 8001d80:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2225      	movs	r2, #37	; 0x25
 8001d86:	2101      	movs	r1, #1
 8001d88:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	221c      	movs	r2, #28
 8001d90:	401a      	ands	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	2102      	movs	r1, #2
 8001d98:	4091      	lsls	r1, r2
 8001d9a:	000a      	movs	r2, r1
 8001d9c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2224      	movs	r2, #36	; 0x24
 8001da2:	2100      	movs	r1, #0
 8001da4:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d039      	beq.n	8001e22 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	0010      	movs	r0, r2
 8001db6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001db8:	e033      	b.n	8001e22 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	221c      	movs	r2, #28
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2208      	movs	r2, #8
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	0013      	movs	r3, r2
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d02a      	beq.n	8001e24 <HAL_DMA_IRQHandler+0x154>
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2208      	movs	r2, #8
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d026      	beq.n	8001e24 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	210e      	movs	r1, #14
 8001de2:	438a      	bics	r2, r1
 8001de4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	221c      	movs	r2, #28
 8001dec:	401a      	ands	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	2101      	movs	r1, #1
 8001df4:	4091      	lsls	r1, r2
 8001df6:	000a      	movs	r2, r1
 8001df8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2225      	movs	r2, #37	; 0x25
 8001e04:	2101      	movs	r1, #1
 8001e06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2224      	movs	r2, #36	; 0x24
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	0010      	movs	r0, r2
 8001e20:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	46c0      	nop			; (mov r8, r8)
}
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b004      	add	sp, #16
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
 8001e38:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	221c      	movs	r2, #28
 8001e40:	401a      	ands	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	2101      	movs	r1, #1
 8001e48:	4091      	lsls	r1, r2
 8001e4a:	000a      	movs	r2, r1
 8001e4c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b10      	cmp	r3, #16
 8001e5c:	d108      	bne.n	8001e70 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e6e:	e007      	b.n	8001e80 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	60da      	str	r2, [r3, #12]
}
 8001e80:	46c0      	nop			; (mov r8, r8)
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b004      	add	sp, #16
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e9e:	e155      	b.n	800214c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4091      	lsls	r1, r2
 8001eaa:	000a      	movs	r2, r1
 8001eac:	4013      	ands	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d100      	bne.n	8001eb8 <HAL_GPIO_Init+0x30>
 8001eb6:	e146      	b.n	8002146 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d005      	beq.n	8001ed0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2203      	movs	r2, #3
 8001eca:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d130      	bne.n	8001f32 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	2203      	movs	r2, #3
 8001edc:	409a      	lsls	r2, r3
 8001ede:	0013      	movs	r3, r2
 8001ee0:	43da      	mvns	r2, r3
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	0013      	movs	r3, r2
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f06:	2201      	movs	r2, #1
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	0013      	movs	r3, r2
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	091b      	lsrs	r3, r3, #4
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	401a      	ands	r2, r3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	409a      	lsls	r2, r3
 8001f24:	0013      	movs	r3, r2
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2203      	movs	r2, #3
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d017      	beq.n	8001f6e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	2203      	movs	r2, #3
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	0013      	movs	r3, r2
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4013      	ands	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	409a      	lsls	r2, r3
 8001f60:	0013      	movs	r3, r2
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2203      	movs	r2, #3
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d123      	bne.n	8001fc2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	08da      	lsrs	r2, r3, #3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3208      	adds	r2, #8
 8001f82:	0092      	lsls	r2, r2, #2
 8001f84:	58d3      	ldr	r3, [r2, r3]
 8001f86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2207      	movs	r2, #7
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	220f      	movs	r2, #15
 8001f92:	409a      	lsls	r2, r3
 8001f94:	0013      	movs	r3, r2
 8001f96:	43da      	mvns	r2, r3
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	691a      	ldr	r2, [r3, #16]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2107      	movs	r1, #7
 8001fa6:	400b      	ands	r3, r1
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	409a      	lsls	r2, r3
 8001fac:	0013      	movs	r3, r2
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	08da      	lsrs	r2, r3, #3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3208      	adds	r2, #8
 8001fbc:	0092      	lsls	r2, r2, #2
 8001fbe:	6939      	ldr	r1, [r7, #16]
 8001fc0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	2203      	movs	r2, #3
 8001fce:	409a      	lsls	r2, r3
 8001fd0:	0013      	movs	r3, r2
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2203      	movs	r2, #3
 8001fe0:	401a      	ands	r2, r3
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	0013      	movs	r3, r2
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	23c0      	movs	r3, #192	; 0xc0
 8001ffc:	029b      	lsls	r3, r3, #10
 8001ffe:	4013      	ands	r3, r2
 8002000:	d100      	bne.n	8002004 <HAL_GPIO_Init+0x17c>
 8002002:	e0a0      	b.n	8002146 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002004:	4b57      	ldr	r3, [pc, #348]	; (8002164 <HAL_GPIO_Init+0x2dc>)
 8002006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002008:	4b56      	ldr	r3, [pc, #344]	; (8002164 <HAL_GPIO_Init+0x2dc>)
 800200a:	2101      	movs	r1, #1
 800200c:	430a      	orrs	r2, r1
 800200e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002010:	4a55      	ldr	r2, [pc, #340]	; (8002168 <HAL_GPIO_Init+0x2e0>)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	089b      	lsrs	r3, r3, #2
 8002016:	3302      	adds	r3, #2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	589b      	ldr	r3, [r3, r2]
 800201c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2203      	movs	r2, #3
 8002022:	4013      	ands	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	220f      	movs	r2, #15
 8002028:	409a      	lsls	r2, r3
 800202a:	0013      	movs	r3, r2
 800202c:	43da      	mvns	r2, r3
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4013      	ands	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	23a0      	movs	r3, #160	; 0xa0
 8002038:	05db      	lsls	r3, r3, #23
 800203a:	429a      	cmp	r2, r3
 800203c:	d01f      	beq.n	800207e <HAL_GPIO_Init+0x1f6>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a4a      	ldr	r2, [pc, #296]	; (800216c <HAL_GPIO_Init+0x2e4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d019      	beq.n	800207a <HAL_GPIO_Init+0x1f2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a49      	ldr	r2, [pc, #292]	; (8002170 <HAL_GPIO_Init+0x2e8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d013      	beq.n	8002076 <HAL_GPIO_Init+0x1ee>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a48      	ldr	r2, [pc, #288]	; (8002174 <HAL_GPIO_Init+0x2ec>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00d      	beq.n	8002072 <HAL_GPIO_Init+0x1ea>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a47      	ldr	r2, [pc, #284]	; (8002178 <HAL_GPIO_Init+0x2f0>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d007      	beq.n	800206e <HAL_GPIO_Init+0x1e6>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a46      	ldr	r2, [pc, #280]	; (800217c <HAL_GPIO_Init+0x2f4>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d101      	bne.n	800206a <HAL_GPIO_Init+0x1e2>
 8002066:	2305      	movs	r3, #5
 8002068:	e00a      	b.n	8002080 <HAL_GPIO_Init+0x1f8>
 800206a:	2306      	movs	r3, #6
 800206c:	e008      	b.n	8002080 <HAL_GPIO_Init+0x1f8>
 800206e:	2304      	movs	r3, #4
 8002070:	e006      	b.n	8002080 <HAL_GPIO_Init+0x1f8>
 8002072:	2303      	movs	r3, #3
 8002074:	e004      	b.n	8002080 <HAL_GPIO_Init+0x1f8>
 8002076:	2302      	movs	r3, #2
 8002078:	e002      	b.n	8002080 <HAL_GPIO_Init+0x1f8>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <HAL_GPIO_Init+0x1f8>
 800207e:	2300      	movs	r3, #0
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	2103      	movs	r1, #3
 8002084:	400a      	ands	r2, r1
 8002086:	0092      	lsls	r2, r2, #2
 8002088:	4093      	lsls	r3, r2
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4313      	orrs	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002090:	4935      	ldr	r1, [pc, #212]	; (8002168 <HAL_GPIO_Init+0x2e0>)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	089b      	lsrs	r3, r3, #2
 8002096:	3302      	adds	r3, #2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800209e:	4b38      	ldr	r3, [pc, #224]	; (8002180 <HAL_GPIO_Init+0x2f8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	43da      	mvns	r2, r3
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4013      	ands	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	2380      	movs	r3, #128	; 0x80
 80020b4:	025b      	lsls	r3, r3, #9
 80020b6:	4013      	ands	r3, r2
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4313      	orrs	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020c2:	4b2f      	ldr	r3, [pc, #188]	; (8002180 <HAL_GPIO_Init+0x2f8>)
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80020c8:	4b2d      	ldr	r3, [pc, #180]	; (8002180 <HAL_GPIO_Init+0x2f8>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	43da      	mvns	r2, r3
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4013      	ands	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	2380      	movs	r3, #128	; 0x80
 80020de:	029b      	lsls	r3, r3, #10
 80020e0:	4013      	ands	r3, r2
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020ec:	4b24      	ldr	r3, [pc, #144]	; (8002180 <HAL_GPIO_Init+0x2f8>)
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020f2:	4b23      	ldr	r3, [pc, #140]	; (8002180 <HAL_GPIO_Init+0x2f8>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	43da      	mvns	r2, r3
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4013      	ands	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	2380      	movs	r3, #128	; 0x80
 8002108:	035b      	lsls	r3, r3, #13
 800210a:	4013      	ands	r3, r2
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4313      	orrs	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002116:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <HAL_GPIO_Init+0x2f8>)
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800211c:	4b18      	ldr	r3, [pc, #96]	; (8002180 <HAL_GPIO_Init+0x2f8>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	43da      	mvns	r2, r3
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4013      	ands	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	039b      	lsls	r3, r3, #14
 8002134:	4013      	ands	r3, r2
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002140:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <HAL_GPIO_Init+0x2f8>)
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	3301      	adds	r3, #1
 800214a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	40da      	lsrs	r2, r3
 8002154:	1e13      	subs	r3, r2, #0
 8002156:	d000      	beq.n	800215a <HAL_GPIO_Init+0x2d2>
 8002158:	e6a2      	b.n	8001ea0 <HAL_GPIO_Init+0x18>
  }
}
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	46c0      	nop			; (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	b006      	add	sp, #24
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40021000 	.word	0x40021000
 8002168:	40010000 	.word	0x40010000
 800216c:	50000400 	.word	0x50000400
 8002170:	50000800 	.word	0x50000800
 8002174:	50000c00 	.word	0x50000c00
 8002178:	50001000 	.word	0x50001000
 800217c:	50001c00 	.word	0x50001c00
 8002180:	40010400 	.word	0x40010400

08002184 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	000a      	movs	r2, r1
 800218e:	1cbb      	adds	r3, r7, #2
 8002190:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	1cba      	adds	r2, r7, #2
 8002198:	8812      	ldrh	r2, [r2, #0]
 800219a:	4013      	ands	r3, r2
 800219c:	d004      	beq.n	80021a8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800219e:	230f      	movs	r3, #15
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	2201      	movs	r2, #1
 80021a4:	701a      	strb	r2, [r3, #0]
 80021a6:	e003      	b.n	80021b0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021a8:	230f      	movs	r3, #15
 80021aa:	18fb      	adds	r3, r7, r3
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80021b0:	230f      	movs	r3, #15
 80021b2:	18fb      	adds	r3, r7, r3
 80021b4:	781b      	ldrb	r3, [r3, #0]
}
 80021b6:	0018      	movs	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	b004      	add	sp, #16
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	0008      	movs	r0, r1
 80021c8:	0011      	movs	r1, r2
 80021ca:	1cbb      	adds	r3, r7, #2
 80021cc:	1c02      	adds	r2, r0, #0
 80021ce:	801a      	strh	r2, [r3, #0]
 80021d0:	1c7b      	adds	r3, r7, #1
 80021d2:	1c0a      	adds	r2, r1, #0
 80021d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021d6:	1c7b      	adds	r3, r7, #1
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d004      	beq.n	80021e8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021de:	1cbb      	adds	r3, r7, #2
 80021e0:	881a      	ldrh	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80021e6:	e003      	b.n	80021f0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80021e8:	1cbb      	adds	r3, r7, #2
 80021ea:	881a      	ldrh	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021f0:	46c0      	nop			; (mov r8, r8)
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b002      	add	sp, #8
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	000a      	movs	r2, r1
 8002202:	1cbb      	adds	r3, r7, #2
 8002204:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800220c:	1cbb      	adds	r3, r7, #2
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	4013      	ands	r3, r2
 8002214:	041a      	lsls	r2, r3, #16
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	43db      	mvns	r3, r3
 800221a:	1cb9      	adds	r1, r7, #2
 800221c:	8809      	ldrh	r1, [r1, #0]
 800221e:	400b      	ands	r3, r1
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	619a      	str	r2, [r3, #24]
}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	46bd      	mov	sp, r7
 800222a:	b004      	add	sp, #16
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002230:	b5b0      	push	{r4, r5, r7, lr}
 8002232:	b08a      	sub	sp, #40	; 0x28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d102      	bne.n	8002244 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	f000 fb6c 	bl	800291c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002244:	4bc8      	ldr	r3, [pc, #800]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	220c      	movs	r2, #12
 800224a:	4013      	ands	r3, r2
 800224c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800224e:	4bc6      	ldr	r3, [pc, #792]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	2380      	movs	r3, #128	; 0x80
 8002254:	025b      	lsls	r3, r3, #9
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2201      	movs	r2, #1
 8002260:	4013      	ands	r3, r2
 8002262:	d100      	bne.n	8002266 <HAL_RCC_OscConfig+0x36>
 8002264:	e07d      	b.n	8002362 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	2b08      	cmp	r3, #8
 800226a:	d007      	beq.n	800227c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	2b0c      	cmp	r3, #12
 8002270:	d112      	bne.n	8002298 <HAL_RCC_OscConfig+0x68>
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	2380      	movs	r3, #128	; 0x80
 8002276:	025b      	lsls	r3, r3, #9
 8002278:	429a      	cmp	r2, r3
 800227a:	d10d      	bne.n	8002298 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227c:	4bba      	ldr	r3, [pc, #744]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	2380      	movs	r3, #128	; 0x80
 8002282:	029b      	lsls	r3, r3, #10
 8002284:	4013      	ands	r3, r2
 8002286:	d100      	bne.n	800228a <HAL_RCC_OscConfig+0x5a>
 8002288:	e06a      	b.n	8002360 <HAL_RCC_OscConfig+0x130>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d166      	bne.n	8002360 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	f000 fb42 	bl	800291c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	025b      	lsls	r3, r3, #9
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d107      	bne.n	80022b4 <HAL_RCC_OscConfig+0x84>
 80022a4:	4bb0      	ldr	r3, [pc, #704]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4baf      	ldr	r3, [pc, #700]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 80022aa:	2180      	movs	r1, #128	; 0x80
 80022ac:	0249      	lsls	r1, r1, #9
 80022ae:	430a      	orrs	r2, r1
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	e027      	b.n	8002304 <HAL_RCC_OscConfig+0xd4>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	23a0      	movs	r3, #160	; 0xa0
 80022ba:	02db      	lsls	r3, r3, #11
 80022bc:	429a      	cmp	r2, r3
 80022be:	d10e      	bne.n	80022de <HAL_RCC_OscConfig+0xae>
 80022c0:	4ba9      	ldr	r3, [pc, #676]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4ba8      	ldr	r3, [pc, #672]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 80022c6:	2180      	movs	r1, #128	; 0x80
 80022c8:	02c9      	lsls	r1, r1, #11
 80022ca:	430a      	orrs	r2, r1
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	4ba6      	ldr	r3, [pc, #664]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	4ba5      	ldr	r3, [pc, #660]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 80022d4:	2180      	movs	r1, #128	; 0x80
 80022d6:	0249      	lsls	r1, r1, #9
 80022d8:	430a      	orrs	r2, r1
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	e012      	b.n	8002304 <HAL_RCC_OscConfig+0xd4>
 80022de:	4ba2      	ldr	r3, [pc, #648]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	4ba1      	ldr	r3, [pc, #644]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 80022e4:	49a1      	ldr	r1, [pc, #644]	; (800256c <HAL_RCC_OscConfig+0x33c>)
 80022e6:	400a      	ands	r2, r1
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	4b9f      	ldr	r3, [pc, #636]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	025b      	lsls	r3, r3, #9
 80022f2:	4013      	ands	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4b9b      	ldr	r3, [pc, #620]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b9a      	ldr	r3, [pc, #616]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 80022fe:	499c      	ldr	r1, [pc, #624]	; (8002570 <HAL_RCC_OscConfig+0x340>)
 8002300:	400a      	ands	r2, r1
 8002302:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d014      	beq.n	8002336 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7ff f8dc 	bl	80014c8 <HAL_GetTick>
 8002310:	0003      	movs	r3, r0
 8002312:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002316:	f7ff f8d7 	bl	80014c8 <HAL_GetTick>
 800231a:	0002      	movs	r2, r0
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b64      	cmp	r3, #100	; 0x64
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e2f9      	b.n	800291c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002328:	4b8f      	ldr	r3, [pc, #572]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	2380      	movs	r3, #128	; 0x80
 800232e:	029b      	lsls	r3, r3, #10
 8002330:	4013      	ands	r3, r2
 8002332:	d0f0      	beq.n	8002316 <HAL_RCC_OscConfig+0xe6>
 8002334:	e015      	b.n	8002362 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002336:	f7ff f8c7 	bl	80014c8 <HAL_GetTick>
 800233a:	0003      	movs	r3, r0
 800233c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002340:	f7ff f8c2 	bl	80014c8 <HAL_GetTick>
 8002344:	0002      	movs	r2, r0
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b64      	cmp	r3, #100	; 0x64
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e2e4      	b.n	800291c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002352:	4b85      	ldr	r3, [pc, #532]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	029b      	lsls	r3, r3, #10
 800235a:	4013      	ands	r3, r2
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x110>
 800235e:	e000      	b.n	8002362 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002360:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2202      	movs	r2, #2
 8002368:	4013      	ands	r3, r2
 800236a:	d100      	bne.n	800236e <HAL_RCC_OscConfig+0x13e>
 800236c:	e099      	b.n	80024a2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	2220      	movs	r2, #32
 8002378:	4013      	ands	r3, r2
 800237a:	d009      	beq.n	8002390 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800237c:	4b7a      	ldr	r3, [pc, #488]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b79      	ldr	r3, [pc, #484]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 8002382:	2120      	movs	r1, #32
 8002384:	430a      	orrs	r2, r1
 8002386:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	2220      	movs	r2, #32
 800238c:	4393      	bics	r3, r2
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	2b04      	cmp	r3, #4
 8002394:	d005      	beq.n	80023a2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	2b0c      	cmp	r3, #12
 800239a:	d13e      	bne.n	800241a <HAL_RCC_OscConfig+0x1ea>
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d13b      	bne.n	800241a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80023a2:	4b71      	ldr	r3, [pc, #452]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2204      	movs	r2, #4
 80023a8:	4013      	ands	r3, r2
 80023aa:	d004      	beq.n	80023b6 <HAL_RCC_OscConfig+0x186>
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e2b2      	b.n	800291c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b6:	4b6c      	ldr	r3, [pc, #432]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	4a6e      	ldr	r2, [pc, #440]	; (8002574 <HAL_RCC_OscConfig+0x344>)
 80023bc:	4013      	ands	r3, r2
 80023be:	0019      	movs	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	021a      	lsls	r2, r3, #8
 80023c6:	4b68      	ldr	r3, [pc, #416]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 80023c8:	430a      	orrs	r2, r1
 80023ca:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80023cc:	4b66      	ldr	r3, [pc, #408]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2209      	movs	r2, #9
 80023d2:	4393      	bics	r3, r2
 80023d4:	0019      	movs	r1, r3
 80023d6:	4b64      	ldr	r3, [pc, #400]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 80023d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023da:	430a      	orrs	r2, r1
 80023dc:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023de:	f000 fbeb 	bl	8002bb8 <HAL_RCC_GetSysClockFreq>
 80023e2:	0001      	movs	r1, r0
 80023e4:	4b60      	ldr	r3, [pc, #384]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	220f      	movs	r2, #15
 80023ec:	4013      	ands	r3, r2
 80023ee:	4a62      	ldr	r2, [pc, #392]	; (8002578 <HAL_RCC_OscConfig+0x348>)
 80023f0:	5cd3      	ldrb	r3, [r2, r3]
 80023f2:	000a      	movs	r2, r1
 80023f4:	40da      	lsrs	r2, r3
 80023f6:	4b61      	ldr	r3, [pc, #388]	; (800257c <HAL_RCC_OscConfig+0x34c>)
 80023f8:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80023fa:	4b61      	ldr	r3, [pc, #388]	; (8002580 <HAL_RCC_OscConfig+0x350>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2513      	movs	r5, #19
 8002400:	197c      	adds	r4, r7, r5
 8002402:	0018      	movs	r0, r3
 8002404:	f7ff f81a 	bl	800143c <HAL_InitTick>
 8002408:	0003      	movs	r3, r0
 800240a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800240c:	197b      	adds	r3, r7, r5
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d046      	beq.n	80024a2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002414:	197b      	adds	r3, r7, r5
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	e280      	b.n	800291c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	2b00      	cmp	r3, #0
 800241e:	d027      	beq.n	8002470 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002420:	4b51      	ldr	r3, [pc, #324]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2209      	movs	r2, #9
 8002426:	4393      	bics	r3, r2
 8002428:	0019      	movs	r1, r3
 800242a:	4b4f      	ldr	r3, [pc, #316]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 800242c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242e:	430a      	orrs	r2, r1
 8002430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002432:	f7ff f849 	bl	80014c8 <HAL_GetTick>
 8002436:	0003      	movs	r3, r0
 8002438:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800243c:	f7ff f844 	bl	80014c8 <HAL_GetTick>
 8002440:	0002      	movs	r2, r0
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e266      	b.n	800291c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800244e:	4b46      	ldr	r3, [pc, #280]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2204      	movs	r2, #4
 8002454:	4013      	ands	r3, r2
 8002456:	d0f1      	beq.n	800243c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002458:	4b43      	ldr	r3, [pc, #268]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	4a45      	ldr	r2, [pc, #276]	; (8002574 <HAL_RCC_OscConfig+0x344>)
 800245e:	4013      	ands	r3, r2
 8002460:	0019      	movs	r1, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	021a      	lsls	r2, r3, #8
 8002468:	4b3f      	ldr	r3, [pc, #252]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 800246a:	430a      	orrs	r2, r1
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	e018      	b.n	80024a2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002470:	4b3d      	ldr	r3, [pc, #244]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b3c      	ldr	r3, [pc, #240]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 8002476:	2101      	movs	r1, #1
 8002478:	438a      	bics	r2, r1
 800247a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7ff f824 	bl	80014c8 <HAL_GetTick>
 8002480:	0003      	movs	r3, r0
 8002482:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002486:	f7ff f81f 	bl	80014c8 <HAL_GetTick>
 800248a:	0002      	movs	r2, r0
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e241      	b.n	800291c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002498:	4b33      	ldr	r3, [pc, #204]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2204      	movs	r2, #4
 800249e:	4013      	ands	r3, r2
 80024a0:	d1f1      	bne.n	8002486 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2210      	movs	r2, #16
 80024a8:	4013      	ands	r3, r2
 80024aa:	d100      	bne.n	80024ae <HAL_RCC_OscConfig+0x27e>
 80024ac:	e0a1      	b.n	80025f2 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d140      	bne.n	8002536 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024b4:	4b2c      	ldr	r3, [pc, #176]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	2380      	movs	r3, #128	; 0x80
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4013      	ands	r3, r2
 80024be:	d005      	beq.n	80024cc <HAL_RCC_OscConfig+0x29c>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e227      	b.n	800291c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024cc:	4b26      	ldr	r3, [pc, #152]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4a2c      	ldr	r2, [pc, #176]	; (8002584 <HAL_RCC_OscConfig+0x354>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	0019      	movs	r1, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a1a      	ldr	r2, [r3, #32]
 80024da:	4b23      	ldr	r3, [pc, #140]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 80024dc:	430a      	orrs	r2, r1
 80024de:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024e0:	4b21      	ldr	r3, [pc, #132]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	021b      	lsls	r3, r3, #8
 80024e6:	0a19      	lsrs	r1, r3, #8
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	061a      	lsls	r2, r3, #24
 80024ee:	4b1e      	ldr	r3, [pc, #120]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 80024f0:	430a      	orrs	r2, r1
 80024f2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	0b5b      	lsrs	r3, r3, #13
 80024fa:	3301      	adds	r3, #1
 80024fc:	2280      	movs	r2, #128	; 0x80
 80024fe:	0212      	lsls	r2, r2, #8
 8002500:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002502:	4b19      	ldr	r3, [pc, #100]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	091b      	lsrs	r3, r3, #4
 8002508:	210f      	movs	r1, #15
 800250a:	400b      	ands	r3, r1
 800250c:	491a      	ldr	r1, [pc, #104]	; (8002578 <HAL_RCC_OscConfig+0x348>)
 800250e:	5ccb      	ldrb	r3, [r1, r3]
 8002510:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002512:	4b1a      	ldr	r3, [pc, #104]	; (800257c <HAL_RCC_OscConfig+0x34c>)
 8002514:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002516:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <HAL_RCC_OscConfig+0x350>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2513      	movs	r5, #19
 800251c:	197c      	adds	r4, r7, r5
 800251e:	0018      	movs	r0, r3
 8002520:	f7fe ff8c 	bl	800143c <HAL_InitTick>
 8002524:	0003      	movs	r3, r0
 8002526:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002528:	197b      	adds	r3, r7, r5
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d060      	beq.n	80025f2 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002530:	197b      	adds	r3, r7, r5
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	e1f2      	b.n	800291c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d03f      	beq.n	80025be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800253e:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <HAL_RCC_OscConfig+0x338>)
 8002544:	2180      	movs	r1, #128	; 0x80
 8002546:	0049      	lsls	r1, r1, #1
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254c:	f7fe ffbc 	bl	80014c8 <HAL_GetTick>
 8002550:	0003      	movs	r3, r0
 8002552:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002554:	e018      	b.n	8002588 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002556:	f7fe ffb7 	bl	80014c8 <HAL_GetTick>
 800255a:	0002      	movs	r2, r0
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d911      	bls.n	8002588 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e1d9      	b.n	800291c <HAL_RCC_OscConfig+0x6ec>
 8002568:	40021000 	.word	0x40021000
 800256c:	fffeffff 	.word	0xfffeffff
 8002570:	fffbffff 	.word	0xfffbffff
 8002574:	ffffe0ff 	.word	0xffffe0ff
 8002578:	080034f0 	.word	0x080034f0
 800257c:	20000000 	.word	0x20000000
 8002580:	20000004 	.word	0x20000004
 8002584:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002588:	4bc9      	ldr	r3, [pc, #804]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	2380      	movs	r3, #128	; 0x80
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4013      	ands	r3, r2
 8002592:	d0e0      	beq.n	8002556 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002594:	4bc6      	ldr	r3, [pc, #792]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	4ac6      	ldr	r2, [pc, #792]	; (80028b4 <HAL_RCC_OscConfig+0x684>)
 800259a:	4013      	ands	r3, r2
 800259c:	0019      	movs	r1, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1a      	ldr	r2, [r3, #32]
 80025a2:	4bc3      	ldr	r3, [pc, #780]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 80025a4:	430a      	orrs	r2, r1
 80025a6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025a8:	4bc1      	ldr	r3, [pc, #772]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	021b      	lsls	r3, r3, #8
 80025ae:	0a19      	lsrs	r1, r3, #8
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	061a      	lsls	r2, r3, #24
 80025b6:	4bbe      	ldr	r3, [pc, #760]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 80025b8:	430a      	orrs	r2, r1
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	e019      	b.n	80025f2 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025be:	4bbc      	ldr	r3, [pc, #752]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	4bbb      	ldr	r3, [pc, #748]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 80025c4:	49bc      	ldr	r1, [pc, #752]	; (80028b8 <HAL_RCC_OscConfig+0x688>)
 80025c6:	400a      	ands	r2, r1
 80025c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ca:	f7fe ff7d 	bl	80014c8 <HAL_GetTick>
 80025ce:	0003      	movs	r3, r0
 80025d0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025d4:	f7fe ff78 	bl	80014c8 <HAL_GetTick>
 80025d8:	0002      	movs	r2, r0
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e19a      	b.n	800291c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80025e6:	4bb2      	ldr	r3, [pc, #712]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	2380      	movs	r3, #128	; 0x80
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4013      	ands	r3, r2
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2208      	movs	r2, #8
 80025f8:	4013      	ands	r3, r2
 80025fa:	d036      	beq.n	800266a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d019      	beq.n	8002638 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002604:	4baa      	ldr	r3, [pc, #680]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 8002606:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002608:	4ba9      	ldr	r3, [pc, #676]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 800260a:	2101      	movs	r1, #1
 800260c:	430a      	orrs	r2, r1
 800260e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002610:	f7fe ff5a 	bl	80014c8 <HAL_GetTick>
 8002614:	0003      	movs	r3, r0
 8002616:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800261a:	f7fe ff55 	bl	80014c8 <HAL_GetTick>
 800261e:	0002      	movs	r2, r0
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e177      	b.n	800291c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800262c:	4ba0      	ldr	r3, [pc, #640]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 800262e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002630:	2202      	movs	r2, #2
 8002632:	4013      	ands	r3, r2
 8002634:	d0f1      	beq.n	800261a <HAL_RCC_OscConfig+0x3ea>
 8002636:	e018      	b.n	800266a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002638:	4b9d      	ldr	r3, [pc, #628]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 800263a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800263c:	4b9c      	ldr	r3, [pc, #624]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 800263e:	2101      	movs	r1, #1
 8002640:	438a      	bics	r2, r1
 8002642:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002644:	f7fe ff40 	bl	80014c8 <HAL_GetTick>
 8002648:	0003      	movs	r3, r0
 800264a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800264e:	f7fe ff3b 	bl	80014c8 <HAL_GetTick>
 8002652:	0002      	movs	r2, r0
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e15d      	b.n	800291c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002660:	4b93      	ldr	r3, [pc, #588]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 8002662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002664:	2202      	movs	r2, #2
 8002666:	4013      	ands	r3, r2
 8002668:	d1f1      	bne.n	800264e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2204      	movs	r2, #4
 8002670:	4013      	ands	r3, r2
 8002672:	d100      	bne.n	8002676 <HAL_RCC_OscConfig+0x446>
 8002674:	e0ae      	b.n	80027d4 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002676:	2023      	movs	r0, #35	; 0x23
 8002678:	183b      	adds	r3, r7, r0
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800267e:	4b8c      	ldr	r3, [pc, #560]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 8002680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002682:	2380      	movs	r3, #128	; 0x80
 8002684:	055b      	lsls	r3, r3, #21
 8002686:	4013      	ands	r3, r2
 8002688:	d109      	bne.n	800269e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800268a:	4b89      	ldr	r3, [pc, #548]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 800268c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800268e:	4b88      	ldr	r3, [pc, #544]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 8002690:	2180      	movs	r1, #128	; 0x80
 8002692:	0549      	lsls	r1, r1, #21
 8002694:	430a      	orrs	r2, r1
 8002696:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002698:	183b      	adds	r3, r7, r0
 800269a:	2201      	movs	r2, #1
 800269c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269e:	4b87      	ldr	r3, [pc, #540]	; (80028bc <HAL_RCC_OscConfig+0x68c>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	4013      	ands	r3, r2
 80026a8:	d11a      	bne.n	80026e0 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026aa:	4b84      	ldr	r3, [pc, #528]	; (80028bc <HAL_RCC_OscConfig+0x68c>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	4b83      	ldr	r3, [pc, #524]	; (80028bc <HAL_RCC_OscConfig+0x68c>)
 80026b0:	2180      	movs	r1, #128	; 0x80
 80026b2:	0049      	lsls	r1, r1, #1
 80026b4:	430a      	orrs	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026b8:	f7fe ff06 	bl	80014c8 <HAL_GetTick>
 80026bc:	0003      	movs	r3, r0
 80026be:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c2:	f7fe ff01 	bl	80014c8 <HAL_GetTick>
 80026c6:	0002      	movs	r2, r0
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b64      	cmp	r3, #100	; 0x64
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e123      	b.n	800291c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d4:	4b79      	ldr	r3, [pc, #484]	; (80028bc <HAL_RCC_OscConfig+0x68c>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	4013      	ands	r3, r2
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d107      	bne.n	80026fc <HAL_RCC_OscConfig+0x4cc>
 80026ec:	4b70      	ldr	r3, [pc, #448]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 80026ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026f0:	4b6f      	ldr	r3, [pc, #444]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 80026f2:	2180      	movs	r1, #128	; 0x80
 80026f4:	0049      	lsls	r1, r1, #1
 80026f6:	430a      	orrs	r2, r1
 80026f8:	651a      	str	r2, [r3, #80]	; 0x50
 80026fa:	e031      	b.n	8002760 <HAL_RCC_OscConfig+0x530>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10c      	bne.n	800271e <HAL_RCC_OscConfig+0x4ee>
 8002704:	4b6a      	ldr	r3, [pc, #424]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 8002706:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002708:	4b69      	ldr	r3, [pc, #420]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 800270a:	496b      	ldr	r1, [pc, #428]	; (80028b8 <HAL_RCC_OscConfig+0x688>)
 800270c:	400a      	ands	r2, r1
 800270e:	651a      	str	r2, [r3, #80]	; 0x50
 8002710:	4b67      	ldr	r3, [pc, #412]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 8002712:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002714:	4b66      	ldr	r3, [pc, #408]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 8002716:	496a      	ldr	r1, [pc, #424]	; (80028c0 <HAL_RCC_OscConfig+0x690>)
 8002718:	400a      	ands	r2, r1
 800271a:	651a      	str	r2, [r3, #80]	; 0x50
 800271c:	e020      	b.n	8002760 <HAL_RCC_OscConfig+0x530>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	23a0      	movs	r3, #160	; 0xa0
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	429a      	cmp	r2, r3
 8002728:	d10e      	bne.n	8002748 <HAL_RCC_OscConfig+0x518>
 800272a:	4b61      	ldr	r3, [pc, #388]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 800272c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800272e:	4b60      	ldr	r3, [pc, #384]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 8002730:	2180      	movs	r1, #128	; 0x80
 8002732:	00c9      	lsls	r1, r1, #3
 8002734:	430a      	orrs	r2, r1
 8002736:	651a      	str	r2, [r3, #80]	; 0x50
 8002738:	4b5d      	ldr	r3, [pc, #372]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 800273a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800273c:	4b5c      	ldr	r3, [pc, #368]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 800273e:	2180      	movs	r1, #128	; 0x80
 8002740:	0049      	lsls	r1, r1, #1
 8002742:	430a      	orrs	r2, r1
 8002744:	651a      	str	r2, [r3, #80]	; 0x50
 8002746:	e00b      	b.n	8002760 <HAL_RCC_OscConfig+0x530>
 8002748:	4b59      	ldr	r3, [pc, #356]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 800274a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800274c:	4b58      	ldr	r3, [pc, #352]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 800274e:	495a      	ldr	r1, [pc, #360]	; (80028b8 <HAL_RCC_OscConfig+0x688>)
 8002750:	400a      	ands	r2, r1
 8002752:	651a      	str	r2, [r3, #80]	; 0x50
 8002754:	4b56      	ldr	r3, [pc, #344]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 8002756:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002758:	4b55      	ldr	r3, [pc, #340]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 800275a:	4959      	ldr	r1, [pc, #356]	; (80028c0 <HAL_RCC_OscConfig+0x690>)
 800275c:	400a      	ands	r2, r1
 800275e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d015      	beq.n	8002794 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002768:	f7fe feae 	bl	80014c8 <HAL_GetTick>
 800276c:	0003      	movs	r3, r0
 800276e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002770:	e009      	b.n	8002786 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002772:	f7fe fea9 	bl	80014c8 <HAL_GetTick>
 8002776:	0002      	movs	r2, r0
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	4a51      	ldr	r2, [pc, #324]	; (80028c4 <HAL_RCC_OscConfig+0x694>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e0ca      	b.n	800291c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002786:	4b4a      	ldr	r3, [pc, #296]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 8002788:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800278a:	2380      	movs	r3, #128	; 0x80
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4013      	ands	r3, r2
 8002790:	d0ef      	beq.n	8002772 <HAL_RCC_OscConfig+0x542>
 8002792:	e014      	b.n	80027be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002794:	f7fe fe98 	bl	80014c8 <HAL_GetTick>
 8002798:	0003      	movs	r3, r0
 800279a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800279c:	e009      	b.n	80027b2 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800279e:	f7fe fe93 	bl	80014c8 <HAL_GetTick>
 80027a2:	0002      	movs	r2, r0
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	4a46      	ldr	r2, [pc, #280]	; (80028c4 <HAL_RCC_OscConfig+0x694>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e0b4      	b.n	800291c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027b2:	4b3f      	ldr	r3, [pc, #252]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 80027b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027b6:	2380      	movs	r3, #128	; 0x80
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4013      	ands	r3, r2
 80027bc:	d1ef      	bne.n	800279e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027be:	2323      	movs	r3, #35	; 0x23
 80027c0:	18fb      	adds	r3, r7, r3
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d105      	bne.n	80027d4 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c8:	4b39      	ldr	r3, [pc, #228]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 80027ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027cc:	4b38      	ldr	r3, [pc, #224]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 80027ce:	493e      	ldr	r1, [pc, #248]	; (80028c8 <HAL_RCC_OscConfig+0x698>)
 80027d0:	400a      	ands	r2, r1
 80027d2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d100      	bne.n	80027de <HAL_RCC_OscConfig+0x5ae>
 80027dc:	e09d      	b.n	800291a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	2b0c      	cmp	r3, #12
 80027e2:	d100      	bne.n	80027e6 <HAL_RCC_OscConfig+0x5b6>
 80027e4:	e076      	b.n	80028d4 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d145      	bne.n	800287a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ee:	4b30      	ldr	r3, [pc, #192]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	4b2f      	ldr	r3, [pc, #188]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 80027f4:	4935      	ldr	r1, [pc, #212]	; (80028cc <HAL_RCC_OscConfig+0x69c>)
 80027f6:	400a      	ands	r2, r1
 80027f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fa:	f7fe fe65 	bl	80014c8 <HAL_GetTick>
 80027fe:	0003      	movs	r3, r0
 8002800:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002804:	f7fe fe60 	bl	80014c8 <HAL_GetTick>
 8002808:	0002      	movs	r2, r0
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e082      	b.n	800291c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002816:	4b26      	ldr	r3, [pc, #152]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	2380      	movs	r3, #128	; 0x80
 800281c:	049b      	lsls	r3, r3, #18
 800281e:	4013      	ands	r3, r2
 8002820:	d1f0      	bne.n	8002804 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002822:	4b23      	ldr	r3, [pc, #140]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	4a2a      	ldr	r2, [pc, #168]	; (80028d0 <HAL_RCC_OscConfig+0x6a0>)
 8002828:	4013      	ands	r3, r2
 800282a:	0019      	movs	r1, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	431a      	orrs	r2, r3
 800283c:	4b1c      	ldr	r3, [pc, #112]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 800283e:	430a      	orrs	r2, r1
 8002840:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002842:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	4b1a      	ldr	r3, [pc, #104]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 8002848:	2180      	movs	r1, #128	; 0x80
 800284a:	0449      	lsls	r1, r1, #17
 800284c:	430a      	orrs	r2, r1
 800284e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7fe fe3a 	bl	80014c8 <HAL_GetTick>
 8002854:	0003      	movs	r3, r0
 8002856:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285a:	f7fe fe35 	bl	80014c8 <HAL_GetTick>
 800285e:	0002      	movs	r2, r0
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e057      	b.n	800291c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800286c:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	049b      	lsls	r3, r3, #18
 8002874:	4013      	ands	r3, r2
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x62a>
 8002878:	e04f      	b.n	800291a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287a:	4b0d      	ldr	r3, [pc, #52]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 8002880:	4912      	ldr	r1, [pc, #72]	; (80028cc <HAL_RCC_OscConfig+0x69c>)
 8002882:	400a      	ands	r2, r1
 8002884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002886:	f7fe fe1f 	bl	80014c8 <HAL_GetTick>
 800288a:	0003      	movs	r3, r0
 800288c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002890:	f7fe fe1a 	bl	80014c8 <HAL_GetTick>
 8002894:	0002      	movs	r2, r0
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e03c      	b.n	800291c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80028a2:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <HAL_RCC_OscConfig+0x680>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	049b      	lsls	r3, r3, #18
 80028aa:	4013      	ands	r3, r2
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x660>
 80028ae:	e034      	b.n	800291a <HAL_RCC_OscConfig+0x6ea>
 80028b0:	40021000 	.word	0x40021000
 80028b4:	ffff1fff 	.word	0xffff1fff
 80028b8:	fffffeff 	.word	0xfffffeff
 80028bc:	40007000 	.word	0x40007000
 80028c0:	fffffbff 	.word	0xfffffbff
 80028c4:	00001388 	.word	0x00001388
 80028c8:	efffffff 	.word	0xefffffff
 80028cc:	feffffff 	.word	0xfeffffff
 80028d0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e01d      	b.n	800291c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028e0:	4b10      	ldr	r3, [pc, #64]	; (8002924 <HAL_RCC_OscConfig+0x6f4>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	2380      	movs	r3, #128	; 0x80
 80028ea:	025b      	lsls	r3, r3, #9
 80028ec:	401a      	ands	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d10f      	bne.n	8002916 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	23f0      	movs	r3, #240	; 0xf0
 80028fa:	039b      	lsls	r3, r3, #14
 80028fc:	401a      	ands	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002902:	429a      	cmp	r2, r3
 8002904:	d107      	bne.n	8002916 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	23c0      	movs	r3, #192	; 0xc0
 800290a:	041b      	lsls	r3, r3, #16
 800290c:	401a      	ands	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002912:	429a      	cmp	r2, r3
 8002914:	d001      	beq.n	800291a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	0018      	movs	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	b00a      	add	sp, #40	; 0x28
 8002922:	bdb0      	pop	{r4, r5, r7, pc}
 8002924:	40021000 	.word	0x40021000

08002928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002928:	b5b0      	push	{r4, r5, r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e128      	b.n	8002b8e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800293c:	4b96      	ldr	r3, [pc, #600]	; (8002b98 <HAL_RCC_ClockConfig+0x270>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2201      	movs	r2, #1
 8002942:	4013      	ands	r3, r2
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d91e      	bls.n	8002988 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294a:	4b93      	ldr	r3, [pc, #588]	; (8002b98 <HAL_RCC_ClockConfig+0x270>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2201      	movs	r2, #1
 8002950:	4393      	bics	r3, r2
 8002952:	0019      	movs	r1, r3
 8002954:	4b90      	ldr	r3, [pc, #576]	; (8002b98 <HAL_RCC_ClockConfig+0x270>)
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800295c:	f7fe fdb4 	bl	80014c8 <HAL_GetTick>
 8002960:	0003      	movs	r3, r0
 8002962:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002964:	e009      	b.n	800297a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002966:	f7fe fdaf 	bl	80014c8 <HAL_GetTick>
 800296a:	0002      	movs	r2, r0
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	4a8a      	ldr	r2, [pc, #552]	; (8002b9c <HAL_RCC_ClockConfig+0x274>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d901      	bls.n	800297a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e109      	b.n	8002b8e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800297a:	4b87      	ldr	r3, [pc, #540]	; (8002b98 <HAL_RCC_ClockConfig+0x270>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2201      	movs	r2, #1
 8002980:	4013      	ands	r3, r2
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d1ee      	bne.n	8002966 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2202      	movs	r2, #2
 800298e:	4013      	ands	r3, r2
 8002990:	d009      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002992:	4b83      	ldr	r3, [pc, #524]	; (8002ba0 <HAL_RCC_ClockConfig+0x278>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	22f0      	movs	r2, #240	; 0xf0
 8002998:	4393      	bics	r3, r2
 800299a:	0019      	movs	r1, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	4b7f      	ldr	r3, [pc, #508]	; (8002ba0 <HAL_RCC_ClockConfig+0x278>)
 80029a2:	430a      	orrs	r2, r1
 80029a4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2201      	movs	r2, #1
 80029ac:	4013      	ands	r3, r2
 80029ae:	d100      	bne.n	80029b2 <HAL_RCC_ClockConfig+0x8a>
 80029b0:	e089      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d107      	bne.n	80029ca <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029ba:	4b79      	ldr	r3, [pc, #484]	; (8002ba0 <HAL_RCC_ClockConfig+0x278>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	2380      	movs	r3, #128	; 0x80
 80029c0:	029b      	lsls	r3, r3, #10
 80029c2:	4013      	ands	r3, r2
 80029c4:	d120      	bne.n	8002a08 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e0e1      	b.n	8002b8e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b03      	cmp	r3, #3
 80029d0:	d107      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029d2:	4b73      	ldr	r3, [pc, #460]	; (8002ba0 <HAL_RCC_ClockConfig+0x278>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	2380      	movs	r3, #128	; 0x80
 80029d8:	049b      	lsls	r3, r3, #18
 80029da:	4013      	ands	r3, r2
 80029dc:	d114      	bne.n	8002a08 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e0d5      	b.n	8002b8e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d106      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029ea:	4b6d      	ldr	r3, [pc, #436]	; (8002ba0 <HAL_RCC_ClockConfig+0x278>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2204      	movs	r2, #4
 80029f0:	4013      	ands	r3, r2
 80029f2:	d109      	bne.n	8002a08 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0ca      	b.n	8002b8e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80029f8:	4b69      	ldr	r3, [pc, #420]	; (8002ba0 <HAL_RCC_ClockConfig+0x278>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	2380      	movs	r3, #128	; 0x80
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4013      	ands	r3, r2
 8002a02:	d101      	bne.n	8002a08 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0c2      	b.n	8002b8e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a08:	4b65      	ldr	r3, [pc, #404]	; (8002ba0 <HAL_RCC_ClockConfig+0x278>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	4393      	bics	r3, r2
 8002a10:	0019      	movs	r1, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	4b62      	ldr	r3, [pc, #392]	; (8002ba0 <HAL_RCC_ClockConfig+0x278>)
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a1c:	f7fe fd54 	bl	80014c8 <HAL_GetTick>
 8002a20:	0003      	movs	r3, r0
 8002a22:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d111      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a2c:	e009      	b.n	8002a42 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a2e:	f7fe fd4b 	bl	80014c8 <HAL_GetTick>
 8002a32:	0002      	movs	r2, r0
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	4a58      	ldr	r2, [pc, #352]	; (8002b9c <HAL_RCC_ClockConfig+0x274>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e0a5      	b.n	8002b8e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a42:	4b57      	ldr	r3, [pc, #348]	; (8002ba0 <HAL_RCC_ClockConfig+0x278>)
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	220c      	movs	r2, #12
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b08      	cmp	r3, #8
 8002a4c:	d1ef      	bne.n	8002a2e <HAL_RCC_ClockConfig+0x106>
 8002a4e:	e03a      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d111      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a58:	e009      	b.n	8002a6e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a5a:	f7fe fd35 	bl	80014c8 <HAL_GetTick>
 8002a5e:	0002      	movs	r2, r0
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	4a4d      	ldr	r2, [pc, #308]	; (8002b9c <HAL_RCC_ClockConfig+0x274>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e08f      	b.n	8002b8e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a6e:	4b4c      	ldr	r3, [pc, #304]	; (8002ba0 <HAL_RCC_ClockConfig+0x278>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	220c      	movs	r2, #12
 8002a74:	4013      	ands	r3, r2
 8002a76:	2b0c      	cmp	r3, #12
 8002a78:	d1ef      	bne.n	8002a5a <HAL_RCC_ClockConfig+0x132>
 8002a7a:	e024      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d11b      	bne.n	8002abc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a84:	e009      	b.n	8002a9a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a86:	f7fe fd1f 	bl	80014c8 <HAL_GetTick>
 8002a8a:	0002      	movs	r2, r0
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	4a42      	ldr	r2, [pc, #264]	; (8002b9c <HAL_RCC_ClockConfig+0x274>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e079      	b.n	8002b8e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a9a:	4b41      	ldr	r3, [pc, #260]	; (8002ba0 <HAL_RCC_ClockConfig+0x278>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	220c      	movs	r2, #12
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d1ef      	bne.n	8002a86 <HAL_RCC_ClockConfig+0x15e>
 8002aa6:	e00e      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa8:	f7fe fd0e 	bl	80014c8 <HAL_GetTick>
 8002aac:	0002      	movs	r2, r0
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	4a3a      	ldr	r2, [pc, #232]	; (8002b9c <HAL_RCC_ClockConfig+0x274>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e068      	b.n	8002b8e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002abc:	4b38      	ldr	r3, [pc, #224]	; (8002ba0 <HAL_RCC_ClockConfig+0x278>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	220c      	movs	r2, #12
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ac6:	4b34      	ldr	r3, [pc, #208]	; (8002b98 <HAL_RCC_ClockConfig+0x270>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2201      	movs	r2, #1
 8002acc:	4013      	ands	r3, r2
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d21e      	bcs.n	8002b12 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad4:	4b30      	ldr	r3, [pc, #192]	; (8002b98 <HAL_RCC_ClockConfig+0x270>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	4393      	bics	r3, r2
 8002adc:	0019      	movs	r1, r3
 8002ade:	4b2e      	ldr	r3, [pc, #184]	; (8002b98 <HAL_RCC_ClockConfig+0x270>)
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ae6:	f7fe fcef 	bl	80014c8 <HAL_GetTick>
 8002aea:	0003      	movs	r3, r0
 8002aec:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aee:	e009      	b.n	8002b04 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af0:	f7fe fcea 	bl	80014c8 <HAL_GetTick>
 8002af4:	0002      	movs	r2, r0
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	4a28      	ldr	r2, [pc, #160]	; (8002b9c <HAL_RCC_ClockConfig+0x274>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e044      	b.n	8002b8e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b04:	4b24      	ldr	r3, [pc, #144]	; (8002b98 <HAL_RCC_ClockConfig+0x270>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d1ee      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2204      	movs	r2, #4
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d009      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b1c:	4b20      	ldr	r3, [pc, #128]	; (8002ba0 <HAL_RCC_ClockConfig+0x278>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4a20      	ldr	r2, [pc, #128]	; (8002ba4 <HAL_RCC_ClockConfig+0x27c>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	0019      	movs	r1, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <HAL_RCC_ClockConfig+0x278>)
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2208      	movs	r2, #8
 8002b36:	4013      	ands	r3, r2
 8002b38:	d00a      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b3a:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <HAL_RCC_ClockConfig+0x278>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	4a1a      	ldr	r2, [pc, #104]	; (8002ba8 <HAL_RCC_ClockConfig+0x280>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	0019      	movs	r1, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	00da      	lsls	r2, r3, #3
 8002b4a:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <HAL_RCC_ClockConfig+0x278>)
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b50:	f000 f832 	bl	8002bb8 <HAL_RCC_GetSysClockFreq>
 8002b54:	0001      	movs	r1, r0
 8002b56:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <HAL_RCC_ClockConfig+0x278>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	091b      	lsrs	r3, r3, #4
 8002b5c:	220f      	movs	r2, #15
 8002b5e:	4013      	ands	r3, r2
 8002b60:	4a12      	ldr	r2, [pc, #72]	; (8002bac <HAL_RCC_ClockConfig+0x284>)
 8002b62:	5cd3      	ldrb	r3, [r2, r3]
 8002b64:	000a      	movs	r2, r1
 8002b66:	40da      	lsrs	r2, r3
 8002b68:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <HAL_RCC_ClockConfig+0x288>)
 8002b6a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b6c:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <HAL_RCC_ClockConfig+0x28c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	250b      	movs	r5, #11
 8002b72:	197c      	adds	r4, r7, r5
 8002b74:	0018      	movs	r0, r3
 8002b76:	f7fe fc61 	bl	800143c <HAL_InitTick>
 8002b7a:	0003      	movs	r3, r0
 8002b7c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002b7e:	197b      	adds	r3, r7, r5
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002b86:	197b      	adds	r3, r7, r5
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	e000      	b.n	8002b8e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	0018      	movs	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	b004      	add	sp, #16
 8002b94:	bdb0      	pop	{r4, r5, r7, pc}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	40022000 	.word	0x40022000
 8002b9c:	00001388 	.word	0x00001388
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	fffff8ff 	.word	0xfffff8ff
 8002ba8:	ffffc7ff 	.word	0xffffc7ff
 8002bac:	080034f0 	.word	0x080034f0
 8002bb0:	20000000 	.word	0x20000000
 8002bb4:	20000004 	.word	0x20000004

08002bb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb8:	b5b0      	push	{r4, r5, r7, lr}
 8002bba:	b08e      	sub	sp, #56	; 0x38
 8002bbc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002bbe:	4b4c      	ldr	r3, [pc, #304]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bc6:	230c      	movs	r3, #12
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b0c      	cmp	r3, #12
 8002bcc:	d014      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x40>
 8002bce:	d900      	bls.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x1a>
 8002bd0:	e07b      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0x112>
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d002      	beq.n	8002bdc <HAL_RCC_GetSysClockFreq+0x24>
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d00b      	beq.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bda:	e076      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002bdc:	4b44      	ldr	r3, [pc, #272]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2210      	movs	r2, #16
 8002be2:	4013      	ands	r3, r2
 8002be4:	d002      	beq.n	8002bec <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002be6:	4b43      	ldr	r3, [pc, #268]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002be8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002bea:	e07c      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002bec:	4b42      	ldr	r3, [pc, #264]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x140>)
 8002bee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002bf0:	e079      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bf2:	4b42      	ldr	r3, [pc, #264]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x144>)
 8002bf4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002bf6:	e076      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfa:	0c9a      	lsrs	r2, r3, #18
 8002bfc:	230f      	movs	r3, #15
 8002bfe:	401a      	ands	r2, r3
 8002c00:	4b3f      	ldr	r3, [pc, #252]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x148>)
 8002c02:	5c9b      	ldrb	r3, [r3, r2]
 8002c04:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c08:	0d9a      	lsrs	r2, r3, #22
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	3301      	adds	r3, #1
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c12:	4b37      	ldr	r3, [pc, #220]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	2380      	movs	r3, #128	; 0x80
 8002c18:	025b      	lsls	r3, r3, #9
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d01a      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c20:	61bb      	str	r3, [r7, #24]
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
 8002c26:	4a35      	ldr	r2, [pc, #212]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x144>)
 8002c28:	2300      	movs	r3, #0
 8002c2a:	69b8      	ldr	r0, [r7, #24]
 8002c2c:	69f9      	ldr	r1, [r7, #28]
 8002c2e:	f7fd fb17 	bl	8000260 <__aeabi_lmul>
 8002c32:	0002      	movs	r2, r0
 8002c34:	000b      	movs	r3, r1
 8002c36:	0010      	movs	r0, r2
 8002c38:	0019      	movs	r1, r3
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f7fd faeb 	bl	8000220 <__aeabi_uldivmod>
 8002c4a:	0002      	movs	r2, r0
 8002c4c:	000b      	movs	r3, r1
 8002c4e:	0013      	movs	r3, r2
 8002c50:	637b      	str	r3, [r7, #52]	; 0x34
 8002c52:	e037      	b.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002c54:	4b26      	ldr	r3, [pc, #152]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2210      	movs	r2, #16
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d01a      	beq.n	8002c94 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	4a23      	ldr	r2, [pc, #140]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002c68:	2300      	movs	r3, #0
 8002c6a:	68b8      	ldr	r0, [r7, #8]
 8002c6c:	68f9      	ldr	r1, [r7, #12]
 8002c6e:	f7fd faf7 	bl	8000260 <__aeabi_lmul>
 8002c72:	0002      	movs	r2, r0
 8002c74:	000b      	movs	r3, r1
 8002c76:	0010      	movs	r0, r2
 8002c78:	0019      	movs	r1, r3
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	603b      	str	r3, [r7, #0]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	607b      	str	r3, [r7, #4]
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f7fd facb 	bl	8000220 <__aeabi_uldivmod>
 8002c8a:	0002      	movs	r2, r0
 8002c8c:	000b      	movs	r3, r1
 8002c8e:	0013      	movs	r3, r2
 8002c90:	637b      	str	r3, [r7, #52]	; 0x34
 8002c92:	e017      	b.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c96:	0018      	movs	r0, r3
 8002c98:	2300      	movs	r3, #0
 8002c9a:	0019      	movs	r1, r3
 8002c9c:	4a16      	ldr	r2, [pc, #88]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x140>)
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f7fd fade 	bl	8000260 <__aeabi_lmul>
 8002ca4:	0002      	movs	r2, r0
 8002ca6:	000b      	movs	r3, r1
 8002ca8:	0010      	movs	r0, r2
 8002caa:	0019      	movs	r1, r3
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	001c      	movs	r4, r3
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	001d      	movs	r5, r3
 8002cb4:	0022      	movs	r2, r4
 8002cb6:	002b      	movs	r3, r5
 8002cb8:	f7fd fab2 	bl	8000220 <__aeabi_uldivmod>
 8002cbc:	0002      	movs	r2, r0
 8002cbe:	000b      	movs	r3, r1
 8002cc0:	0013      	movs	r3, r2
 8002cc2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002cc8:	e00d      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002cca:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	0b5b      	lsrs	r3, r3, #13
 8002cd0:	2207      	movs	r2, #7
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	2280      	movs	r2, #128	; 0x80
 8002cdc:	0212      	lsls	r2, r2, #8
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	0013      	movs	r3, r2
 8002ce2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ce4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002ce8:	0018      	movs	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	b00e      	add	sp, #56	; 0x38
 8002cee:	bdb0      	pop	{r4, r5, r7, pc}
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	003d0900 	.word	0x003d0900
 8002cf8:	00f42400 	.word	0x00f42400
 8002cfc:	007a1200 	.word	0x007a1200
 8002d00:	08003500 	.word	0x08003500

08002d04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e083      	b.n	8002e1e <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d109      	bne.n	8002d32 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	2382      	movs	r3, #130	; 0x82
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d009      	beq.n	8002d3e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	61da      	str	r2, [r3, #28]
 8002d30:	e005      	b.n	8002d3e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2251      	movs	r2, #81	; 0x51
 8002d48:	5c9b      	ldrb	r3, [r3, r2]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d107      	bne.n	8002d60 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2250      	movs	r2, #80	; 0x50
 8002d54:	2100      	movs	r1, #0
 8002d56:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f7fe f98e 	bl	800107c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2251      	movs	r2, #81	; 0x51
 8002d64:	2102      	movs	r1, #2
 8002d66:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2140      	movs	r1, #64	; 0x40
 8002d74:	438a      	bics	r2, r1
 8002d76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	2382      	movs	r3, #130	; 0x82
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	401a      	ands	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6899      	ldr	r1, [r3, #8]
 8002d86:	2384      	movs	r3, #132	; 0x84
 8002d88:	021b      	lsls	r3, r3, #8
 8002d8a:	400b      	ands	r3, r1
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68d9      	ldr	r1, [r3, #12]
 8002d92:	2380      	movs	r3, #128	; 0x80
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	400b      	ands	r3, r1
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	2102      	movs	r1, #2
 8002da0:	400b      	ands	r3, r1
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	2101      	movs	r1, #1
 8002daa:	400b      	ands	r3, r1
 8002dac:	431a      	orrs	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6999      	ldr	r1, [r3, #24]
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	400b      	ands	r3, r1
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	2138      	movs	r1, #56	; 0x38
 8002dc0:	400b      	ands	r3, r1
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	2180      	movs	r1, #128	; 0x80
 8002dca:	400b      	ands	r3, r1
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	0011      	movs	r1, r2
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dd4:	2380      	movs	r3, #128	; 0x80
 8002dd6:	019b      	lsls	r3, r3, #6
 8002dd8:	401a      	ands	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	0c1b      	lsrs	r3, r3, #16
 8002de8:	2204      	movs	r2, #4
 8002dea:	4013      	ands	r3, r2
 8002dec:	0019      	movs	r1, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	2210      	movs	r2, #16
 8002df4:	401a      	ands	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69da      	ldr	r2, [r3, #28]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4907      	ldr	r1, [pc, #28]	; (8002e28 <HAL_SPI_Init+0x124>)
 8002e0a:	400a      	ands	r2, r1
 8002e0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2251      	movs	r2, #81	; 0x51
 8002e18:	2101      	movs	r1, #1
 8002e1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	0018      	movs	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	b002      	add	sp, #8
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	fffff7ff 	.word	0xfffff7ff

08002e2c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	1dbb      	adds	r3, r7, #6
 8002e38:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e3a:	2317      	movs	r3, #23
 8002e3c:	18fb      	adds	r3, r7, r3
 8002e3e:	2200      	movs	r2, #0
 8002e40:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2250      	movs	r2, #80	; 0x50
 8002e46:	5c9b      	ldrb	r3, [r3, r2]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_SPI_Transmit_DMA+0x24>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e0a7      	b.n	8002fa0 <HAL_SPI_Transmit_DMA+0x174>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2250      	movs	r2, #80	; 0x50
 8002e54:	2101      	movs	r1, #1
 8002e56:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2251      	movs	r2, #81	; 0x51
 8002e5c:	5c9b      	ldrb	r3, [r3, r2]
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d004      	beq.n	8002e6e <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 8002e64:	2317      	movs	r3, #23
 8002e66:	18fb      	adds	r3, r7, r3
 8002e68:	2202      	movs	r2, #2
 8002e6a:	701a      	strb	r2, [r3, #0]
    goto error;
 8002e6c:	e091      	b.n	8002f92 <HAL_SPI_Transmit_DMA+0x166>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_SPI_Transmit_DMA+0x50>
 8002e74:	1dbb      	adds	r3, r7, #6
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d104      	bne.n	8002e86 <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 8002e7c:	2317      	movs	r3, #23
 8002e7e:	18fb      	adds	r3, r7, r3
 8002e80:	2201      	movs	r2, #1
 8002e82:	701a      	strb	r2, [r3, #0]
    goto error;
 8002e84:	e085      	b.n	8002f92 <HAL_SPI_Transmit_DMA+0x166>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2251      	movs	r2, #81	; 0x51
 8002e8a:	2103      	movs	r1, #3
 8002e8c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1dba      	adds	r2, r7, #6
 8002e9e:	8812      	ldrh	r2, [r2, #0]
 8002ea0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	1dba      	adds	r2, r7, #6
 8002ea6:	8812      	ldrh	r2, [r2, #0]
 8002ea8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	2380      	movs	r3, #128	; 0x80
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d110      	bne.n	8002ef6 <HAL_SPI_Transmit_DMA+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2140      	movs	r1, #64	; 0x40
 8002ee0:	438a      	bics	r2, r1
 8002ee2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2180      	movs	r1, #128	; 0x80
 8002ef0:	01c9      	lsls	r1, r1, #7
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efa:	4a2b      	ldr	r2, [pc, #172]	; (8002fa8 <HAL_SPI_Transmit_DMA+0x17c>)
 8002efc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f02:	4a2a      	ldr	r2, [pc, #168]	; (8002fac <HAL_SPI_Transmit_DMA+0x180>)
 8002f04:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f0a:	4a29      	ldr	r2, [pc, #164]	; (8002fb0 <HAL_SPI_Transmit_DMA+0x184>)
 8002f0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f12:	2200      	movs	r2, #0
 8002f14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	0019      	movs	r1, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	330c      	adds	r3, #12
 8002f26:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f2c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002f2e:	f7fe fe69 	bl	8001c04 <HAL_DMA_Start_IT>
 8002f32:	1e03      	subs	r3, r0, #0
 8002f34:	d00e      	beq.n	8002f54 <HAL_SPI_Transmit_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3a:	2210      	movs	r2, #16
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002f42:	2317      	movs	r3, #23
 8002f44:	18fb      	adds	r3, r7, r3
 8002f46:	2201      	movs	r2, #1
 8002f48:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2251      	movs	r2, #81	; 0x51
 8002f4e:	2101      	movs	r1, #1
 8002f50:	5499      	strb	r1, [r3, r2]
    goto error;
 8002f52:	e01e      	b.n	8002f92 <HAL_SPI_Transmit_DMA+0x166>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2240      	movs	r2, #64	; 0x40
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2b40      	cmp	r3, #64	; 0x40
 8002f60:	d007      	beq.n	8002f72 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2140      	movs	r1, #64	; 0x40
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2120      	movs	r1, #32
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2102      	movs	r1, #2
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2250      	movs	r2, #80	; 0x50
 8002f96:	2100      	movs	r1, #0
 8002f98:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002f9a:	2317      	movs	r3, #23
 8002f9c:	18fb      	adds	r3, r7, r3
 8002f9e:	781b      	ldrb	r3, [r3, #0]
}
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	b006      	add	sp, #24
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	08003081 	.word	0x08003081
 8002fac:	08002fd5 	.word	0x08002fd5
 8002fb0:	0800309f 	.word	0x0800309f

08002fb4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002fbc:	46c0      	nop			; (mov r8, r8)
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b002      	add	sp, #8
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002fcc:	46c0      	nop			; (mov r8, r8)
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b002      	add	sp, #8
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fe2:	f7fe fa71 	bl	80014c8 <HAL_GetTick>
 8002fe6:	0003      	movs	r3, r0
 8002fe8:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	d03c      	beq.n	8003072 <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2120      	movs	r1, #32
 8003004:	438a      	bics	r2, r1
 8003006:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2102      	movs	r1, #2
 8003014:	438a      	bics	r2, r1
 8003016:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2164      	movs	r1, #100	; 0x64
 800301e:	0018      	movs	r0, r3
 8003020:	f000 f8ec 	bl	80031fc <SPI_EndRxTxTransaction>
 8003024:	1e03      	subs	r3, r0, #0
 8003026:	d005      	beq.n	8003034 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302c:	2220      	movs	r2, #32
 800302e:	431a      	orrs	r2, r3
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10a      	bne.n	8003052 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800303c:	2300      	movs	r3, #0
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2200      	movs	r2, #0
 8003056:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2251      	movs	r2, #81	; 0x51
 800305c:	2101      	movs	r1, #1
 800305e:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003064:	2b00      	cmp	r3, #0
 8003066:	d004      	beq.n	8003072 <SPI_DMATransmitCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	0018      	movs	r0, r3
 800306c:	f7ff ffaa 	bl	8002fc4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003070:	e003      	b.n	800307a <SPI_DMATransmitCplt+0xa6>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	0018      	movs	r0, r3
 8003076:	f7ff ff9d 	bl	8002fb4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800307a:	46bd      	mov	sp, r7
 800307c:	b006      	add	sp, #24
 800307e:	bd80      	pop	{r7, pc}

08003080 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	0018      	movs	r0, r3
 8003092:	f7fd fae1 	bl	8000658 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	46bd      	mov	sp, r7
 800309a:	b004      	add	sp, #16
 800309c:	bd80      	pop	{r7, pc}

0800309e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b084      	sub	sp, #16
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2103      	movs	r1, #3
 80030b8:	438a      	bics	r2, r1
 80030ba:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c0:	2210      	movs	r2, #16
 80030c2:	431a      	orrs	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2251      	movs	r2, #81	; 0x51
 80030cc:	2101      	movs	r1, #1
 80030ce:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	0018      	movs	r0, r3
 80030d4:	f7ff ff76 	bl	8002fc4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80030d8:	46c0      	nop			; (mov r8, r8)
 80030da:	46bd      	mov	sp, r7
 80030dc:	b004      	add	sp, #16
 80030de:	bd80      	pop	{r7, pc}

080030e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	1dfb      	adds	r3, r7, #7
 80030ee:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030f0:	f7fe f9ea 	bl	80014c8 <HAL_GetTick>
 80030f4:	0002      	movs	r2, r0
 80030f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	18d3      	adds	r3, r2, r3
 80030fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003100:	f7fe f9e2 	bl	80014c8 <HAL_GetTick>
 8003104:	0003      	movs	r3, r0
 8003106:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003108:	4b3a      	ldr	r3, [pc, #232]	; (80031f4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	015b      	lsls	r3, r3, #5
 800310e:	0d1b      	lsrs	r3, r3, #20
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	4353      	muls	r3, r2
 8003114:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003116:	e058      	b.n	80031ca <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	3301      	adds	r3, #1
 800311c:	d055      	beq.n	80031ca <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800311e:	f7fe f9d3 	bl	80014c8 <HAL_GetTick>
 8003122:	0002      	movs	r2, r0
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	69fa      	ldr	r2, [r7, #28]
 800312a:	429a      	cmp	r2, r3
 800312c:	d902      	bls.n	8003134 <SPI_WaitFlagStateUntilTimeout+0x54>
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d142      	bne.n	80031ba <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	21e0      	movs	r1, #224	; 0xe0
 8003140:	438a      	bics	r2, r1
 8003142:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	2382      	movs	r3, #130	; 0x82
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	429a      	cmp	r2, r3
 800314e:	d113      	bne.n	8003178 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	2380      	movs	r3, #128	; 0x80
 8003156:	021b      	lsls	r3, r3, #8
 8003158:	429a      	cmp	r2, r3
 800315a:	d005      	beq.n	8003168 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	2380      	movs	r3, #128	; 0x80
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	429a      	cmp	r2, r3
 8003166:	d107      	bne.n	8003178 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2140      	movs	r1, #64	; 0x40
 8003174:	438a      	bics	r2, r1
 8003176:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800317c:	2380      	movs	r3, #128	; 0x80
 800317e:	019b      	lsls	r3, r3, #6
 8003180:	429a      	cmp	r2, r3
 8003182:	d110      	bne.n	80031a6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	491a      	ldr	r1, [pc, #104]	; (80031f8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003190:	400a      	ands	r2, r1
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2180      	movs	r1, #128	; 0x80
 80031a0:	0189      	lsls	r1, r1, #6
 80031a2:	430a      	orrs	r2, r1
 80031a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2251      	movs	r2, #81	; 0x51
 80031aa:	2101      	movs	r1, #1
 80031ac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2250      	movs	r2, #80	; 0x50
 80031b2:	2100      	movs	r1, #0
 80031b4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e017      	b.n	80031ea <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	4013      	ands	r3, r2
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	425a      	negs	r2, r3
 80031da:	4153      	adcs	r3, r2
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	001a      	movs	r2, r3
 80031e0:	1dfb      	adds	r3, r7, #7
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d197      	bne.n	8003118 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	0018      	movs	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b008      	add	sp, #32
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	20000000 	.word	0x20000000
 80031f8:	ffffdfff 	.word	0xffffdfff

080031fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af02      	add	r7, sp, #8
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003208:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <SPI_EndRxTxTransaction+0x84>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	491d      	ldr	r1, [pc, #116]	; (8003284 <SPI_EndRxTxTransaction+0x88>)
 800320e:	0018      	movs	r0, r3
 8003210:	f7fc ff7a 	bl	8000108 <__udivsi3>
 8003214:	0003      	movs	r3, r0
 8003216:	001a      	movs	r2, r3
 8003218:	0013      	movs	r3, r2
 800321a:	015b      	lsls	r3, r3, #5
 800321c:	1a9b      	subs	r3, r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	189b      	adds	r3, r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	2382      	movs	r3, #130	; 0x82
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	429a      	cmp	r2, r3
 8003230:	d112      	bne.n	8003258 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	0013      	movs	r3, r2
 800323c:	2200      	movs	r2, #0
 800323e:	2180      	movs	r1, #128	; 0x80
 8003240:	f7ff ff4e 	bl	80030e0 <SPI_WaitFlagStateUntilTimeout>
 8003244:	1e03      	subs	r3, r0, #0
 8003246:	d016      	beq.n	8003276 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324c:	2220      	movs	r2, #32
 800324e:	431a      	orrs	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e00f      	b.n	8003278 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	3b01      	subs	r3, #1
 8003262:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2280      	movs	r2, #128	; 0x80
 800326c:	4013      	ands	r3, r2
 800326e:	2b80      	cmp	r3, #128	; 0x80
 8003270:	d0f2      	beq.n	8003258 <SPI_EndRxTxTransaction+0x5c>
 8003272:	e000      	b.n	8003276 <SPI_EndRxTxTransaction+0x7a>
        break;
 8003274:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	0018      	movs	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	b006      	add	sp, #24
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20000000 	.word	0x20000000
 8003284:	016e3600 	.word	0x016e3600

08003288 <_Znwj>:
 8003288:	b510      	push	{r4, lr}
 800328a:	1e04      	subs	r4, r0, #0
 800328c:	d100      	bne.n	8003290 <_Znwj+0x8>
 800328e:	3401      	adds	r4, #1
 8003290:	0020      	movs	r0, r4
 8003292:	f000 f843 	bl	800331c <malloc>
 8003296:	2800      	cmp	r0, #0
 8003298:	d107      	bne.n	80032aa <_Znwj+0x22>
 800329a:	f000 f807 	bl	80032ac <_ZSt15get_new_handlerv>
 800329e:	2800      	cmp	r0, #0
 80032a0:	d101      	bne.n	80032a6 <_Znwj+0x1e>
 80032a2:	f000 f809 	bl	80032b8 <abort>
 80032a6:	4780      	blx	r0
 80032a8:	e7f2      	b.n	8003290 <_Znwj+0x8>
 80032aa:	bd10      	pop	{r4, pc}

080032ac <_ZSt15get_new_handlerv>:
 80032ac:	4b01      	ldr	r3, [pc, #4]	; (80032b4 <_ZSt15get_new_handlerv+0x8>)
 80032ae:	6818      	ldr	r0, [r3, #0]
 80032b0:	4770      	bx	lr
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	2000018c 	.word	0x2000018c

080032b8 <abort>:
 80032b8:	2006      	movs	r0, #6
 80032ba:	b510      	push	{r4, lr}
 80032bc:	f000 f8da 	bl	8003474 <raise>
 80032c0:	2001      	movs	r0, #1
 80032c2:	f7fe f828 	bl	8001316 <_exit>
	...

080032c8 <__errno>:
 80032c8:	4b01      	ldr	r3, [pc, #4]	; (80032d0 <__errno+0x8>)
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	4770      	bx	lr
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	2000000c 	.word	0x2000000c

080032d4 <__libc_init_array>:
 80032d4:	b570      	push	{r4, r5, r6, lr}
 80032d6:	2600      	movs	r6, #0
 80032d8:	4d0c      	ldr	r5, [pc, #48]	; (800330c <__libc_init_array+0x38>)
 80032da:	4c0d      	ldr	r4, [pc, #52]	; (8003310 <__libc_init_array+0x3c>)
 80032dc:	1b64      	subs	r4, r4, r5
 80032de:	10a4      	asrs	r4, r4, #2
 80032e0:	42a6      	cmp	r6, r4
 80032e2:	d109      	bne.n	80032f8 <__libc_init_array+0x24>
 80032e4:	2600      	movs	r6, #0
 80032e6:	f000 f8f7 	bl	80034d8 <_init>
 80032ea:	4d0a      	ldr	r5, [pc, #40]	; (8003314 <__libc_init_array+0x40>)
 80032ec:	4c0a      	ldr	r4, [pc, #40]	; (8003318 <__libc_init_array+0x44>)
 80032ee:	1b64      	subs	r4, r4, r5
 80032f0:	10a4      	asrs	r4, r4, #2
 80032f2:	42a6      	cmp	r6, r4
 80032f4:	d105      	bne.n	8003302 <__libc_init_array+0x2e>
 80032f6:	bd70      	pop	{r4, r5, r6, pc}
 80032f8:	00b3      	lsls	r3, r6, #2
 80032fa:	58eb      	ldr	r3, [r5, r3]
 80032fc:	4798      	blx	r3
 80032fe:	3601      	adds	r6, #1
 8003300:	e7ee      	b.n	80032e0 <__libc_init_array+0xc>
 8003302:	00b3      	lsls	r3, r6, #2
 8003304:	58eb      	ldr	r3, [r5, r3]
 8003306:	4798      	blx	r3
 8003308:	3601      	adds	r6, #1
 800330a:	e7f2      	b.n	80032f2 <__libc_init_array+0x1e>
 800330c:	08003514 	.word	0x08003514
 8003310:	08003514 	.word	0x08003514
 8003314:	08003514 	.word	0x08003514
 8003318:	08003518 	.word	0x08003518

0800331c <malloc>:
 800331c:	b510      	push	{r4, lr}
 800331e:	4b03      	ldr	r3, [pc, #12]	; (800332c <malloc+0x10>)
 8003320:	0001      	movs	r1, r0
 8003322:	6818      	ldr	r0, [r3, #0]
 8003324:	f000 f80c 	bl	8003340 <_malloc_r>
 8003328:	bd10      	pop	{r4, pc}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	2000000c 	.word	0x2000000c

08003330 <memset>:
 8003330:	0003      	movs	r3, r0
 8003332:	1882      	adds	r2, r0, r2
 8003334:	4293      	cmp	r3, r2
 8003336:	d100      	bne.n	800333a <memset+0xa>
 8003338:	4770      	bx	lr
 800333a:	7019      	strb	r1, [r3, #0]
 800333c:	3301      	adds	r3, #1
 800333e:	e7f9      	b.n	8003334 <memset+0x4>

08003340 <_malloc_r>:
 8003340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003342:	2303      	movs	r3, #3
 8003344:	1ccd      	adds	r5, r1, #3
 8003346:	439d      	bics	r5, r3
 8003348:	3508      	adds	r5, #8
 800334a:	0006      	movs	r6, r0
 800334c:	2d0c      	cmp	r5, #12
 800334e:	d21f      	bcs.n	8003390 <_malloc_r+0x50>
 8003350:	250c      	movs	r5, #12
 8003352:	42a9      	cmp	r1, r5
 8003354:	d81e      	bhi.n	8003394 <_malloc_r+0x54>
 8003356:	0030      	movs	r0, r6
 8003358:	f000 f8ac 	bl	80034b4 <__malloc_lock>
 800335c:	4925      	ldr	r1, [pc, #148]	; (80033f4 <_malloc_r+0xb4>)
 800335e:	680a      	ldr	r2, [r1, #0]
 8003360:	0014      	movs	r4, r2
 8003362:	2c00      	cmp	r4, #0
 8003364:	d11a      	bne.n	800339c <_malloc_r+0x5c>
 8003366:	4f24      	ldr	r7, [pc, #144]	; (80033f8 <_malloc_r+0xb8>)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d104      	bne.n	8003378 <_malloc_r+0x38>
 800336e:	0021      	movs	r1, r4
 8003370:	0030      	movs	r0, r6
 8003372:	f000 f843 	bl	80033fc <_sbrk_r>
 8003376:	6038      	str	r0, [r7, #0]
 8003378:	0029      	movs	r1, r5
 800337a:	0030      	movs	r0, r6
 800337c:	f000 f83e 	bl	80033fc <_sbrk_r>
 8003380:	1c43      	adds	r3, r0, #1
 8003382:	d12b      	bne.n	80033dc <_malloc_r+0x9c>
 8003384:	230c      	movs	r3, #12
 8003386:	0030      	movs	r0, r6
 8003388:	6033      	str	r3, [r6, #0]
 800338a:	f000 f89b 	bl	80034c4 <__malloc_unlock>
 800338e:	e003      	b.n	8003398 <_malloc_r+0x58>
 8003390:	2d00      	cmp	r5, #0
 8003392:	dade      	bge.n	8003352 <_malloc_r+0x12>
 8003394:	230c      	movs	r3, #12
 8003396:	6033      	str	r3, [r6, #0]
 8003398:	2000      	movs	r0, #0
 800339a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800339c:	6823      	ldr	r3, [r4, #0]
 800339e:	1b5b      	subs	r3, r3, r5
 80033a0:	d419      	bmi.n	80033d6 <_malloc_r+0x96>
 80033a2:	2b0b      	cmp	r3, #11
 80033a4:	d903      	bls.n	80033ae <_malloc_r+0x6e>
 80033a6:	6023      	str	r3, [r4, #0]
 80033a8:	18e4      	adds	r4, r4, r3
 80033aa:	6025      	str	r5, [r4, #0]
 80033ac:	e003      	b.n	80033b6 <_malloc_r+0x76>
 80033ae:	6863      	ldr	r3, [r4, #4]
 80033b0:	42a2      	cmp	r2, r4
 80033b2:	d10e      	bne.n	80033d2 <_malloc_r+0x92>
 80033b4:	600b      	str	r3, [r1, #0]
 80033b6:	0030      	movs	r0, r6
 80033b8:	f000 f884 	bl	80034c4 <__malloc_unlock>
 80033bc:	0020      	movs	r0, r4
 80033be:	2207      	movs	r2, #7
 80033c0:	300b      	adds	r0, #11
 80033c2:	1d23      	adds	r3, r4, #4
 80033c4:	4390      	bics	r0, r2
 80033c6:	1ac2      	subs	r2, r0, r3
 80033c8:	4298      	cmp	r0, r3
 80033ca:	d0e6      	beq.n	800339a <_malloc_r+0x5a>
 80033cc:	1a1b      	subs	r3, r3, r0
 80033ce:	50a3      	str	r3, [r4, r2]
 80033d0:	e7e3      	b.n	800339a <_malloc_r+0x5a>
 80033d2:	6053      	str	r3, [r2, #4]
 80033d4:	e7ef      	b.n	80033b6 <_malloc_r+0x76>
 80033d6:	0022      	movs	r2, r4
 80033d8:	6864      	ldr	r4, [r4, #4]
 80033da:	e7c2      	b.n	8003362 <_malloc_r+0x22>
 80033dc:	2303      	movs	r3, #3
 80033de:	1cc4      	adds	r4, r0, #3
 80033e0:	439c      	bics	r4, r3
 80033e2:	42a0      	cmp	r0, r4
 80033e4:	d0e1      	beq.n	80033aa <_malloc_r+0x6a>
 80033e6:	1a21      	subs	r1, r4, r0
 80033e8:	0030      	movs	r0, r6
 80033ea:	f000 f807 	bl	80033fc <_sbrk_r>
 80033ee:	1c43      	adds	r3, r0, #1
 80033f0:	d1db      	bne.n	80033aa <_malloc_r+0x6a>
 80033f2:	e7c7      	b.n	8003384 <_malloc_r+0x44>
 80033f4:	20000190 	.word	0x20000190
 80033f8:	20000194 	.word	0x20000194

080033fc <_sbrk_r>:
 80033fc:	2300      	movs	r3, #0
 80033fe:	b570      	push	{r4, r5, r6, lr}
 8003400:	4d06      	ldr	r5, [pc, #24]	; (800341c <_sbrk_r+0x20>)
 8003402:	0004      	movs	r4, r0
 8003404:	0008      	movs	r0, r1
 8003406:	602b      	str	r3, [r5, #0]
 8003408:	f7fd ff92 	bl	8001330 <_sbrk>
 800340c:	1c43      	adds	r3, r0, #1
 800340e:	d103      	bne.n	8003418 <_sbrk_r+0x1c>
 8003410:	682b      	ldr	r3, [r5, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d000      	beq.n	8003418 <_sbrk_r+0x1c>
 8003416:	6023      	str	r3, [r4, #0]
 8003418:	bd70      	pop	{r4, r5, r6, pc}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	2000019c 	.word	0x2000019c

08003420 <_raise_r>:
 8003420:	b570      	push	{r4, r5, r6, lr}
 8003422:	0004      	movs	r4, r0
 8003424:	000d      	movs	r5, r1
 8003426:	291f      	cmp	r1, #31
 8003428:	d904      	bls.n	8003434 <_raise_r+0x14>
 800342a:	2316      	movs	r3, #22
 800342c:	6003      	str	r3, [r0, #0]
 800342e:	2001      	movs	r0, #1
 8003430:	4240      	negs	r0, r0
 8003432:	bd70      	pop	{r4, r5, r6, pc}
 8003434:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003436:	2b00      	cmp	r3, #0
 8003438:	d004      	beq.n	8003444 <_raise_r+0x24>
 800343a:	008a      	lsls	r2, r1, #2
 800343c:	189b      	adds	r3, r3, r2
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	2a00      	cmp	r2, #0
 8003442:	d108      	bne.n	8003456 <_raise_r+0x36>
 8003444:	0020      	movs	r0, r4
 8003446:	f000 f831 	bl	80034ac <_getpid_r>
 800344a:	002a      	movs	r2, r5
 800344c:	0001      	movs	r1, r0
 800344e:	0020      	movs	r0, r4
 8003450:	f000 f81a 	bl	8003488 <_kill_r>
 8003454:	e7ed      	b.n	8003432 <_raise_r+0x12>
 8003456:	2000      	movs	r0, #0
 8003458:	2a01      	cmp	r2, #1
 800345a:	d0ea      	beq.n	8003432 <_raise_r+0x12>
 800345c:	1c51      	adds	r1, r2, #1
 800345e:	d103      	bne.n	8003468 <_raise_r+0x48>
 8003460:	2316      	movs	r3, #22
 8003462:	3001      	adds	r0, #1
 8003464:	6023      	str	r3, [r4, #0]
 8003466:	e7e4      	b.n	8003432 <_raise_r+0x12>
 8003468:	2400      	movs	r4, #0
 800346a:	0028      	movs	r0, r5
 800346c:	601c      	str	r4, [r3, #0]
 800346e:	4790      	blx	r2
 8003470:	0020      	movs	r0, r4
 8003472:	e7de      	b.n	8003432 <_raise_r+0x12>

08003474 <raise>:
 8003474:	b510      	push	{r4, lr}
 8003476:	4b03      	ldr	r3, [pc, #12]	; (8003484 <raise+0x10>)
 8003478:	0001      	movs	r1, r0
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	f7ff ffd0 	bl	8003420 <_raise_r>
 8003480:	bd10      	pop	{r4, pc}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	2000000c 	.word	0x2000000c

08003488 <_kill_r>:
 8003488:	2300      	movs	r3, #0
 800348a:	b570      	push	{r4, r5, r6, lr}
 800348c:	4d06      	ldr	r5, [pc, #24]	; (80034a8 <_kill_r+0x20>)
 800348e:	0004      	movs	r4, r0
 8003490:	0008      	movs	r0, r1
 8003492:	0011      	movs	r1, r2
 8003494:	602b      	str	r3, [r5, #0]
 8003496:	f7fd ff2e 	bl	80012f6 <_kill>
 800349a:	1c43      	adds	r3, r0, #1
 800349c:	d103      	bne.n	80034a6 <_kill_r+0x1e>
 800349e:	682b      	ldr	r3, [r5, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d000      	beq.n	80034a6 <_kill_r+0x1e>
 80034a4:	6023      	str	r3, [r4, #0]
 80034a6:	bd70      	pop	{r4, r5, r6, pc}
 80034a8:	2000019c 	.word	0x2000019c

080034ac <_getpid_r>:
 80034ac:	b510      	push	{r4, lr}
 80034ae:	f7fd ff1c 	bl	80012ea <_getpid>
 80034b2:	bd10      	pop	{r4, pc}

080034b4 <__malloc_lock>:
 80034b4:	b510      	push	{r4, lr}
 80034b6:	4802      	ldr	r0, [pc, #8]	; (80034c0 <__malloc_lock+0xc>)
 80034b8:	f000 f80c 	bl	80034d4 <__retarget_lock_acquire_recursive>
 80034bc:	bd10      	pop	{r4, pc}
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	200001a4 	.word	0x200001a4

080034c4 <__malloc_unlock>:
 80034c4:	b510      	push	{r4, lr}
 80034c6:	4802      	ldr	r0, [pc, #8]	; (80034d0 <__malloc_unlock+0xc>)
 80034c8:	f000 f805 	bl	80034d6 <__retarget_lock_release_recursive>
 80034cc:	bd10      	pop	{r4, pc}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	200001a4 	.word	0x200001a4

080034d4 <__retarget_lock_acquire_recursive>:
 80034d4:	4770      	bx	lr

080034d6 <__retarget_lock_release_recursive>:
 80034d6:	4770      	bx	lr

080034d8 <_init>:
 80034d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034de:	bc08      	pop	{r3}
 80034e0:	469e      	mov	lr, r3
 80034e2:	4770      	bx	lr

080034e4 <_fini>:
 80034e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ea:	bc08      	pop	{r3}
 80034ec:	469e      	mov	lr, r3
 80034ee:	4770      	bx	lr
